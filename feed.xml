<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/" rel="alternate" type="text/html" /><updated>2021-03-27T12:00:45+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/feed.xml</id><title type="html">wjohn1483.github.io</title><subtitle></subtitle><author><name>Your Name</name></author><entry><title type="html">Deep Interest Evolution Network for Click-Through Rate Prediction</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/03/21/deep-interest-evolution-network-for-click-through-rate-prediction/" rel="alternate" type="text/html" title="Deep Interest Evolution Network for Click-Through Rate Prediction" /><published>2021-03-21T00:00:00+00:00</published><updated>2021-03-21T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/03/21/deep-interest-evolution-network-for-click-through-rate-prediction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/03/21/deep-interest-evolution-network-for-click-through-rate-prediction/">&lt;p&gt;簡單記錄一下，看完此篇paper的筆記。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1809.03672.pdf&quot;&gt;這篇paper&lt;/a&gt;是由阿里巴巴提出來，利用使用者的行為和基本資訊，來去預測使用者對廣告的CTR，榮獲AAAI 2019 accepted paper。&lt;/p&gt;

&lt;h2 id=&quot;dien&quot;&gt;DIEN&lt;/h2&gt;

&lt;p&gt;在這篇paper當中，作者將他們的model稱之為DIEN（Deep Interest Evolution Network），其架構如下圖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./model_architecture.png&quot; alt=&quot;Model Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到在架構圖中右下方的地方，有三個輸入，分別是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Target Ad&lt;/strong&gt;：被預測的廣告embedding&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Context Feature&lt;/strong&gt;：這個feature我沒有看得很懂，從paper的原文裡面說是時間以及其他的東西&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UserProfile Feature&lt;/strong&gt;：使用者的embedding，包含性別、年齡等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;左方的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b(1)、b(2)、b(T-1)、b(T)&lt;/code&gt;是使用者行為，像是使用者點過什麼廣告，經過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Embedding Layer&lt;/code&gt;以後稱之為&lt;strong&gt;behavior feature&lt;/strong&gt;，之後這些feature會被餵到&lt;a href=&quot;#interest-extractor-layer&quot;&gt;Interest Extractor Layer&lt;/a&gt;和&lt;a href=&quot;#interest-evolving-layer&quot;&gt;Interest Evolving Layer&lt;/a&gt;，最終產生一個embeeding \(h&apos;(T)\)。&lt;/p&gt;

&lt;p&gt;最後\(h&apos;(T)\)會與右方的&lt;strong&gt;Target Ad&lt;/strong&gt;、&lt;strong&gt;Context Feature&lt;/strong&gt;和&lt;strong&gt;UserProfile Feature&lt;/strong&gt;一同串起來，經過一些fully connected layers以後，產生出2維的輸出（點、不點），並利用binary cross entropy來當作loss function。&lt;/p&gt;

\[L_{target}=-\frac{1}{N}\sum\limits^{N}\limits_{(\textbf{x},y)\in\mathcal{D}}(y\log p(\textbf{x})+(1-y)\log (1-p(\textbf{x})))\]

&lt;h3 id=&quot;interest-extractor-layer&quot;&gt;Interest Extractor Layer&lt;/h3&gt;

&lt;p&gt;在Interest Extractor Layer裡面會去將使用者行為透過GRU製作成feature，在這邊作者使用的是使用者廣告的點擊來當作使用者行為，也就是照著時間順序將使用者點擊的廣告的embedding餵入GRU中，值得一提的是，作者將GRU的輸出額外拉出來做auxiliary loss，來幫助GRU訓練得更好。&lt;/p&gt;

&lt;h4 id=&quot;auxiliary-loss&quot;&gt;Auxiliary Loss&lt;/h4&gt;

&lt;p&gt;在每一個時間點\(t\)，GRU會產生一個輸出\(h(t)\)，這時會將使用者下一個時間點\(t+1\)點擊的廣告embedding \(e(t+1)\)拿出來，接著從眾多廣告embedding中隨機取樣一個沒有點擊的出來作為\(e(t+1)\prime\)，並將有點擊的label成\(1\)，沒點擊的label成\(0\)來做訓練，藉此來讓\(h(t)\)更能含有可以預測出下一個點擊的資訊。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR;
    gru(&quot;h(t)&quot;)
    sig1[&quot;Sigmoid&quot;]
    sig2[&quot;Sigmoid&quot;]
    pos(&quot;e(t+1)&quot;)
    neg(&quot;e(t+1)&apos;&quot;)
    label1((1))
    label0((0))
    pos--&amp;gt;sig1;
    gru--&amp;gt;sig1;
    sig1--&amp;gt;label1;
    gru--&amp;gt;sig2;
    sig2--&amp;gt;label0;
    neg--&amp;gt;sig2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整體的loss fcuntion因此會變成&lt;/p&gt;

\[L=L_{target}+\alpha*L_{aux}\]

\[L_{aux}=-\frac{1}{N}\left( \sum\limits_{i=1}\limits^{N} \sum\limits_{t}\log\sigma(\textbf{h}^i_t,\textbf{e}^i_b[t+1])+\log(1-\sigma(\textbf{h}^i_t,\hat{\textbf{e}^i_b}[t+1]))\right )\]

&lt;h3 id=&quot;interest-evolving-layer&quot;&gt;Interest Evolving Layer&lt;/h3&gt;

&lt;p&gt;使用者可能同時間表現出多種興趣，而我們比較想要知道的是使用者對某特定廣告的興趣有多少，所以在這邊作者加了Interest Evolving Layer，亦即另一層GRU，來去從使用者行為當中萃取出相對應廣告的興趣。&lt;/p&gt;

&lt;p&gt;作者使用的方式是利用attention的機制，透過目標廣告的embedding與Interest Extractor Layer出來的embeeding做相似度的計算&lt;/p&gt;

\[a_t=\frac{\exp(\textbf{h}_tW\textbf{e}_a)}{\sum\limits_{j=1}\limits^{T}\exp(\textbf{h}_jW\textbf{e}_a)}\]

&lt;p&gt;並利用各種不同的方式將這個attention weight融入至GRU中。&lt;/p&gt;

&lt;h4 id=&quot;gru-with-attentional-input-aigru&quot;&gt;GRU with attentional input (AIGRU)&lt;/h4&gt;

&lt;p&gt;第一種方式是直接將Interest Extractor Layer的輸出\(\textbf{h}_t\)直接乘上attention weight \(a_t\)，然後輸入至Interest Evolving Layer中。&lt;/p&gt;

\[\textbf{i}&apos;_t=\textbf{h}_t*a_t\]

&lt;h4 id=&quot;attention-based-gru-agru&quot;&gt;Attention based GRU (AGRU)&lt;/h4&gt;

&lt;p&gt;第二種方式是透過算出來的attention weight來決定Interest Evolving Layer中hidden state \(\textbf{h}&apos;_t\)要被更新多少。&lt;/p&gt;

\[\textbf{h}&apos;_t=(1-a_t)*\textbf{h}&apos;_{t-1}+a_t*\tilde{\textbf{h}&apos;_t}\]

&lt;p&gt;其中\(\textbf{h}&apos;_{t-1}\)是前一個時間點，Interest Evolving Layer的輸出，而\(\tilde{\textbf{h}&apos;_t}\)是當下這個時間點\(t\)，GRU內部所計算出來的hidden state，可以參照原先GRU的更新算式，或是&lt;a href=&quot;https://arxiv.org/pdf/1809.03672.pdf&quot;&gt;paper當中的式(2)~式(5)&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;gru-with-attentional-update-gate-augru&quot;&gt;GRU with attentional update gate (AUGRU)&lt;/h4&gt;

&lt;p&gt;第三種方式是將update gate的值與attention weight相乘，直接控制update gate，這個方式也是實驗當中表現最好的方式。&lt;/p&gt;

\[\tilde{\textbf{u}}&apos;_t=a_t*\textbf{u}&apos;_t\]

\[\textbf{h}&apos;_t=(1-\tilde{\textbf{u}}&apos;_t)\circ\textbf{h}&apos;_{t-1}+\tilde{\textbf{u}}&apos;_t\circ\tilde{\textbf{h}}&apos;_t\]

&lt;h2 id=&quot;experiments&quot;&gt;Experiments&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;public_dataset_auc.png&quot; alt=&quot;Public Dataset AUC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;將DIEN套用在&lt;a href=&quot;https://arxiv.org/pdf/1809.03672.pdf#cite.mcauley2015image&quot;&gt;Amazon Dataset&lt;/a&gt;上面可以看到，DIEN的AUC是裡面最佳的，而作者有將這個model套用在企業的資料上，也獲得了不俗的成績。&lt;/p&gt;

&lt;p&gt;在paper裡面實驗的章節中作者做了許多的實驗來去驗證model裡面的每一個環節都是有必要的，有興趣的人可以去看看原本的paper。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;在這篇paper裡面，作者提出了有點類似wide and deep架構的模型來去解CTR prediction的問題，也加入了各式各樣的方式來應用attention weight，只不過在實驗當中只有展示Electronics和Books這兩個類別的成效，如果可以加入不同類別的比較我覺得可以讓讀者了解model適合套用在哪種類別的場景當中會更好。&lt;/p&gt;</content><author><name>Your Name</name></author><category term="Paper" /><summary type="html">簡單記錄一下，看完此篇paper的筆記。</summary></entry><entry><title type="html">利用GitHub Actions來部署部落格</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/28/move-blog-to-github-actions/" rel="alternate" type="text/html" title="利用GitHub Actions來部署部落格" /><published>2021-02-28T00:00:00+00:00</published><updated>2021-02-28T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/28/move-blog-to-github-actions</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/28/move-blog-to-github-actions/">&lt;p&gt;前陣子發現到GitHub Actions可以用來做CI，試著使用看看。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;github-actions&quot;&gt;GitHub Actions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;是GitHub自己出的一套CI/CD的工具，可以讓你在推code、看CI/CD都在GitHub上面解決。&lt;/p&gt;

&lt;p&gt;GitHub Actions相較於其他CI/CD的工具，我覺得它的優勢在於免費的額度比較多，如果是public repository，actions的使用是免費的，而private repository每個月也有2000分鐘的使用時間，而且如果有其他人fork你的repository，這些CI/CD的設定也會跟著被帶走，別人也可以無痛的使用相同的CI/CD流程。&lt;/p&gt;

&lt;h2 id=&quot;開始使用github-actions&quot;&gt;開始使用GitHub Actions&lt;/h2&gt;

&lt;p&gt;只要在repository裡面創建&lt;strong&gt;.github/workflows/&lt;/strong&gt;，並在裡面放好設定檔，就可以觸發GitHub Actions了，你也可以在repository頁面的上方點Actions的頁籤，裡面有一些設定檔的範本可以選擇。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My first github actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo &quot;hello&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定檔跟其他的工具長相差不多，在steps裡面填寫你想要做的事情，GitHub就會起一個virtual machine來執行。&lt;/p&gt;

&lt;h2 id=&quot;設定環境變數&quot;&gt;設定環境變數&lt;/h2&gt;

&lt;p&gt;如果想要在Actions裡面傳入環境變數的話，可以參考底下的步驟。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
	A(點選Repository右上角的Settings)
	B(點選左下角的Secrets)
	C(點選右上角的New repository secret)
	D(打上環境變數的名稱以及值)
    A--&amp;gt;B;
    B--&amp;gt;C;
    C--&amp;gt;D;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repository裡面設定好環境變數以後，在設定檔需要宣告使用哪些環境變數，之後在steps裡面就可以直接使用了。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My first github actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;USER_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{secrets.USER_NAME}}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo &quot;${USER_NAME}&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;想要在actions裡面push程式碼到repository&quot;&gt;想要在Actions裡面push程式碼到repository&lt;/h2&gt;

&lt;p&gt;在Actions裡面有人寫好了&lt;a href=&quot;https://github.com/marketplace/actions/webfactory-ssh-agent&quot;&gt;工具&lt;/a&gt;可以讓你宣告ssh key，就能像一般利用ssh key push的方式推程式碼到你的repository裡面，產生和設定ssh public/private key的方式請參考&lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh&quot;&gt;GitHub的官方文件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在GitHub設定好public key以後，將private key弄到ssh-agent的方式可以參考底下。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;My first github actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;USER_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{secrets.USER_NAME}}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
        
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webfactory/ssh-agent@v0.5.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ssh-private-key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{secrets.SSH_PRIVATE_KEY}}&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;echo &quot;${USER_NAME}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@JainKai/%E6%B7%BA%E8%AB%87-%E7%94%A8github-actions-%E7%B0%A1%E6%98%93%E7%9A%84-ci-%E4%BE%86%E7%99%BC%E5%B8%83gitpages-6ae48e52467e&quot;&gt;[淺談]用GitHub Actions 簡易的 CI 來發布GitPages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/thinkthenrant/githubactionsintro-94be66a8a9f1&quot;&gt;帶著走的CI/CD：GitHub Actions! (Take the CI/CD with you: GitHub Actions!)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;webfactory/ssh-agent&quot;&gt;webfactory/ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Your Name</name></author><category term="Tool" /><summary type="html">前陣子發現到GitHub Actions可以用來做CI，試著使用看看。</summary></entry><entry><title type="html">利用Gitalk在靜態網頁裡面新增留言區</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/07/gitalk-introduction/" rel="alternate" type="text/html" title="利用Gitalk在靜態網頁裡面新增留言區" /><published>2021-02-07T00:00:00+00:00</published><updated>2021-02-07T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/07/gitalk-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/02/07/gitalk-introduction/">&lt;p&gt;先前在設定檔裡面發現這個部落格主題可以開啟留言的功能，這邊簡單介紹一下其背後所使用的Gitalk以及如何設定它。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;gitalk&quot;&gt;Gitalk&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;Gitalk&lt;/a&gt;是一個使用GitHub issue來當作留言板的工具，讓使用者們可以簡單的在他們的網頁上面安插一些javascript就可以做到留言板的效果，還可以支援Markdown語法，可以看&lt;a href=&quot;https://gitalk.github.io/&quot;&gt;官方的demo&lt;/a&gt;來感受成品大概長什麼樣子。&lt;/p&gt;

&lt;h2 id=&quot;套用在部落格上&quot;&gt;套用在部落格上&lt;/h2&gt;

&lt;p&gt;在jekyll的主題，&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme&quot;&gt;jekyll-TeXt-theme&lt;/a&gt;裡面，已經有內建好可以搭配Gitalk使用，只是需要一些前置步驟並修改一下設定。&lt;/p&gt;

&lt;h3 id=&quot;建立github-application&quot;&gt;建立GitHub Application&lt;/h3&gt;

&lt;p&gt;為了要讓Gitalk可以直接在GitHub上面幫你留言，我們需要建立一個GitHub Application，讓Gitalk以&lt;a href=&quot;https://wjohn1483.github.io/2021/01/26/security-introduction/#oauth&quot;&gt;OAuth&lt;/a&gt;的方式代替你去GitHub上的issue留言，創建一個Application可以點&lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;這邊&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application name：應用程式的名字，可以隨意取&lt;/li&gt;
  &lt;li&gt;Homepage URL：應用程式的首頁，以GitHub page的部落格而言，我是填GitHub page的網址&lt;/li&gt;
  &lt;li&gt;Application description：非必填&lt;/li&gt;
  &lt;li&gt;Authorization callback URL：同上面的&lt;strong&gt;Homepage URL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在建立好GitHub Application以後，網頁上應該會出現client id和client secret，在後面的設定會使用到，值得一提的是，client secret只會顯示這麼一次，記得要好好的保存起來。&lt;/p&gt;

&lt;h3 id=&quot;修改_configyml&quot;&gt;修改_config.yml&lt;/h3&gt;

&lt;p&gt;在_config.yml裡面可以找到&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/blob/master/_config.yml#L118-L144&quot;&gt;有關comment設定的部分&lt;/a&gt;，需要修改的地方有兩塊，一個是需要把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt;改成gitalk，另一個是在底下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitalk&lt;/code&gt;的區塊要把列出來的資訊填好，而設定中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repository&lt;/code&gt;是將來儲存comment的repo，未來comment會儲存在該repo的issue裡面，必須要是public的，這個repo可以跟存放網頁的repo不同，一個修改過後的範例貼在底下，記得要將client id和client secret改掉。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitalk&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# false (default), &quot;disqus&quot;, &quot;gitalk&quot;, &quot;valine&quot;, &quot;custom&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Disqus&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the Disqus shortname for the site&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;## Gitalk&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# please refer to https://github.com/gitalk/gitalk for more info.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gitalk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientID    &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV_CLIENT_ID&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# GitHub Application Client ID&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENV_CLIENT_SECRET&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# GitHub Application Client Secret&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;repository  &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wjohn1483.github.io&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# GitHub repo&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;owner       &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wjohn1483&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# GitHub repo owner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# GitHub repo owner and collaborators, only these guys can initialize GitHub issues, IT IS A LIST.&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wjohn1483&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - your GitHub Id&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Valine&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# please refer to https://valine.js.org/en/ for more info.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;valine&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app_id      &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# LeanCloud App id&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app_key     &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# LeanCloud App key&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;placeholder &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prompt information&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;visitor     &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# false (default)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;meta        &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &quot;[nick, mail, link]&quot; (default) nickname, E-mail, Personal-site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;值得一提的是，原本預設的proxy好像開始限定流量了，所以如果用預設的proxy會無法使用，範例中參考了&lt;a href=&quot;https://github.com/gitalk/gitalk/issues/429&quot;&gt;Gitalk issue&lt;/a&gt;中的解法，改掉預設的proxy。&lt;/p&gt;

&lt;h3 id=&quot;在文章當中加入key&quot;&gt;在文章當中加入key&lt;/h3&gt;

&lt;p&gt;為了要讓Gitalk知道那篇文章對應到那個issue，我們需要給每一篇文章獨一無二的id，並寫在文章的front matter裡面。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;article&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Document - Writing Posts&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mathjax&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-article-id&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個id在front matter裡面稱作&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt;，它的命名規則可以參考&lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/layouts#page-layout&quot;&gt;這裡&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在設定好以後，在本機執行編譯的指令，應該就能在每篇文章底下找到留言板了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;直接使用在靜態網頁上&quot;&gt;直接使用在靜態網頁上&lt;/h2&gt;

&lt;p&gt;如果想要直接使用在單個html上面，不想跟jekyll主題綁在一起的話，可以參考&lt;a href=&quot;https://github.com/gitalk/gitalk#install&quot;&gt;Gitalk文件當中的方式&lt;/a&gt;，使用起來相當的簡單。&lt;/p&gt;

&lt;p&gt;只需要在你的html裡面&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;的地方，多引入Gitalk的javascript。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;並在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;裡面新增&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;/code&gt;，並把相關的變數設定好就行，client id和client secret的取得可以參考文章上面的&lt;a href=&quot;#建立github-application&quot;&gt;建立GitHub Application&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gitalk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clientID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub Application Client ID&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub Application Client Secret&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub repo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// The repository of store comments,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub repo owner&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub repo owner and collaborators, only these guys can initialize github issues&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Ensure uniqueness and length less than 50&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;distractionFreeMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Facebook-like distraction free mode&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gitalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gitalk-container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊有帶入&lt;a href=&quot;https://github.com/gitalk/gitalk/issues/429&quot;&gt;Gitalk issue&lt;/a&gt;裡面所提到的，其他人所提供的proxy，如果想用原本預設的proxy，直接將proxy的設定拿掉就行。&lt;/p&gt;

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://xsaxy.gitee.io/blog/post/2019/12/10/%E4%B8%BB%E9%A2%98TeXt%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E5%9D%91.html&quot;&gt;主题TeXt评论系统设置中的坑&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gitalk/gitalk/issues/429&quot;&gt;在授权gitalk后出现403错误&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Lwl9rf95EqlTYLfconjflQ&quot;&gt;记录一次 Bug 排查过程并分享一些经验&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Your Name</name></author><category term="Tool" /><summary type="html">先前在設定檔裡面發現這個部落格主題可以開啟留言的功能，這邊簡單介紹一下其背後所使用的Gitalk以及如何設定它。</summary></entry><entry><title type="html">網路安全的基本知識</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/01/26/security-introduction/" rel="alternate" type="text/html" title="網路安全的基本知識" /><published>2021-01-26T00:00:00+00:00</published><updated>2021-01-26T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/01/26/security-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2021/01/26/security-introduction/">&lt;p&gt;有鑑於有時會接觸到一些網路安全的東西，這邊簡單紀錄一下碰到的一些東西。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;非對稱式密碼學&quot;&gt;非對稱式密碼學&lt;/h2&gt;

&lt;p&gt;在網路安全當中的很多基礎是建立在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86&quot;&gt;非對稱式密碼學（Asymmetric cryptography）&lt;/a&gt;上，而非對稱式密碼學又是奠基在&lt;a href=&quot;https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95&quot;&gt;RSA&lt;/a&gt;等非對稱加密演算法上。非對稱加密演算法可以產生出成對的公鑰和私鑰，用公鑰加密的文件只能用私鑰來解開，而用私鑰加密的文件也只能用公鑰來解開，在這樣的基礎上，我們就可以與其他人安全的傳遞資料，不怕被其他人偷看。&lt;/p&gt;

&lt;h3 id=&quot;安全傳遞訊息&quot;&gt;安全傳遞訊息&lt;/h3&gt;

&lt;p&gt;這邊簡單說明一下，如何使用非對稱加密演算法來安全的傳遞訊息。&lt;/p&gt;

&lt;p&gt;假如說今天愛麗絲想要傳遞訊息給鮑伯，但怕透過網路的話她所傳遞的訊息會被別人看到，這時，鮑伯可以用非對稱加密演算法先產生一對公鑰和私鑰，透過網路將公鑰傳遞給愛麗絲，而愛麗絲將她想要傳遞的訊息透過鮑伯的公鑰加密以後，透過網路再傳回給鮑伯，鮑伯再用私鑰來將訊息讀取出來。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Public_key_encryption_alice_to_bob.svg/langzh-500px-Public_key_encryption_alice_to_bob.svg.png&quot; alt=&quot;透過非對稱加密演算法安全傳遞訊息&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果有人一直在竊聽兩個人的對話，他雖然可以拿到鮑伯的公鑰以及愛麗絲透過公鑰加密過後的訊息，但因為沒有鮑伯的私鑰的關係，所以也看不到愛麗絲傳給鮑伯的訊息。&lt;/p&gt;

&lt;h3 id=&quot;數位簽章&quot;&gt;數位簽章&lt;/h3&gt;

&lt;p&gt;在上面的例子當中，雖說第三人沒有辦法看到愛麗絲傳遞給鮑伯的訊息，但他擁有鮑伯的公鑰，可以巧妙的偽裝成愛麗絲傳遞訊息給鮑伯。為了防止有人偽裝成愛麗絲，愛麗絲可以利用她自己的私鑰搭配雜湊函數來對訊息做簽名，而鮑伯拿到訊息以後，除了用自己的私鑰解開以外，還需要用愛麗絲的公鑰對簽名做驗證，如此便能防止有人假冒了。&lt;/p&gt;

&lt;h2 id=&quot;常見的網路安全名詞&quot;&gt;常見的網路安全名詞&lt;/h2&gt;

&lt;h3 id=&quot;ssltls&quot;&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&quot;&gt;SSL/TLS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;SSL的全稱是Secure Sockets Layer，而TLS的全稱是Transport Layer Security，SSL是TLS的前身，而這兩個都是transport layer的安全協定。&lt;/p&gt;

&lt;h3 id=&quot;oauth&quot;&gt;OAuth&lt;/h3&gt;

&lt;p&gt;OAuth是一個開放的標準，來讓第三方的app有權利可以存取使用者在其他網站上面的資源，而不用將使用者的帳號密碼給第三方app，OAuth其實是個生活中常用到的標準，舉凡在Slack裡面連結Google Drive的帳戶，或是在電子信箱裡面連結其他電子信箱等，底層使用的可能都是OAuth的標準。&lt;/p&gt;

&lt;p&gt;OAuth具體的操作方式可以參考&lt;a href=&quot;https://petertc.medium.com/oauth-2-0-196a5550b668&quot;&gt;這篇文章&lt;/a&gt;，簡單來說，假設我今天想要透過服務A存取我放在服務B的資料，我得要先去服務B那邊申請說我想要讓第三方服務存取資料，並從服務B拿到Authorization Code，接著我把這Authorization Code給服務A，服務A會拿著這個Authorization Code去服務B那邊換取Access Token，之後服務A就可以使用這Access Token存取我在服務B上面的資料了。&lt;/p&gt;

&lt;h3 id=&quot;yubikey&quot;&gt;Yubikey&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/YubiKey&quot;&gt;Yubikey&lt;/a&gt;是由Yubico這家公司出產的身分認證裝置，常用在二階段認證上，在使用的時候是插在電腦上，並在需要時觸碰它。&lt;/p&gt;

&lt;h3 id=&quot;x509&quot;&gt;X.509&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/X.509&quot;&gt;X.509&lt;/a&gt;是一個格式標準，常用在包括SSL/TLS在內的網路協定裡。它的概念是說，當我想要跟某台素未蒙面的主機聯繫的時候，我不清楚那台主機能不能夠被信任、是不是別人假裝的，這時就會需要一個公正的CA（Certificate Authority）來幫忙，如果對方的主機可以提供我所信任的CA的憑證（Certificate），那麼我就相信對方是可以被信任的而傳送資料過去。&lt;/p&gt;

&lt;p&gt;而CA的架構是金字塔型，主要頒發憑證的是中間的認證中心，他們上面還有更高的認證中心，詳細的資訊可以參考&lt;a href=&quot;https://www.imacat.idv.tw/tech/sslcerts.html.zh-tw#sslx509&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;athenz&quot;&gt;Athenz&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yahoo/athenz&quot;&gt;Athenz&lt;/a&gt;是由Yahoo開源、基於X.509權限管理系統，使用集中式的授權，並以role為基礎，透過指定某個role對某個資源允許或拒絕某些動作來達成授權行為，任何服務想要知道我有沒有權限存取資料的時候，都要去跟權限管理系統詢問，所以可能會有單點故障以及流量的問題，具體的授權流程可以參考&lt;a href=&quot;https://github.com/yahoo/athenz/blob/master/docs/auth_flow.md&quot;&gt;官方的文件&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;mtls&quot;&gt;mTLS&lt;/h3&gt;

&lt;p&gt;mTLS的全稱應該是Mutual TLS，指的是雙方都去驗證對方的身分。在一般的情境下，可能只有使用者需要去驗證服務是不是可以被信任的，但有些時候如果要交換一些比較機密的資料時，就會需要兩邊都做驗證，也就是雙方要各自準備好各自的key、certificate和CA的certificate。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server需要準備：server.key、server.crt、ca.crt&lt;/li&gt;
  &lt;li&gt;Client需要準備：client.key、client.crt、ca.crt&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;okta&quot;&gt;Okta&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Okta_(identity_management)&quot;&gt;Okta&lt;/a&gt;是一家公司，提供其他企業SSO（Single Sign On）的服務，讓企業的員工可以只登入一次就可以存取各式各樣的服務，Okta還提供其他多重要素驗證等等的服務。&lt;/p&gt;

&lt;h3 id=&quot;ckms&quot;&gt;CKMS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cryptomathic.com/products/key-management/crypto-key-management-system&quot;&gt;CKMS&lt;/a&gt;的全稱好像是Crypto Key Management System，是一個幫忙更新、部署key的系統。&lt;/p&gt;

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@RiverChan/%E5%9F%BA%E7%A4%8E%E5%AF%86%E7%A2%BC%E5%AD%B8-%E5%B0%8D%E7%A8%B1%E5%BC%8F%E8%88%87%E9%9D%9E%E5%B0%8D%E7%A8%B1%E5%BC%8F%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93-de25fd5fa537&quot;&gt;基礎密碼學(對稱式與非對稱式加密技術)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://petertc.medium.com/oauth-2-0-196a5550b668&quot;&gt;妳知道第三方應用是怎麼存取妳的雲端資料嗎？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jimwayne.blogspot.com/2019/04/athenz.html&quot;&gt;黑毛到白毛的攻城獅之路: Athenz 的授權流程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imacat.idv.tw/tech/sslcerts.html.zh-tw#sslx509&quot;&gt;如何製作SSL X.509憑證？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/ustccw/article/details/76691248&quot;&gt;SSL/TLS 双向认证(一) – SSL/TLS 工作原理_ustccw-CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Your Name</name></author><category term="Network-Security" /><summary type="html">有鑑於有時會接觸到一些網路安全的東西，這邊簡單紀錄一下碰到的一些東西。</summary></entry><entry><title type="html">利用Circle CI來更新GitHub Pages</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/21/circle-ci/" rel="alternate" type="text/html" title="利用Circle CI來更新GitHub Pages" /><published>2020-11-21T00:00:00+00:00</published><updated>2020-11-21T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/21/circle-ci</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/21/circle-ci/">&lt;p&gt;有鑒於&lt;a href=&quot;https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing&quot;&gt;Travis CI要開始收費了&lt;/a&gt;，所以我將部落格的CI轉移到&lt;a href=&quot;https://circleci.com&quot;&gt;Circle CI&lt;/a&gt;上，在這篇文章記錄一下轉移的過程。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;為什麼要使用circle-ci&quot;&gt;為什麼要使用Circle CI？&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;https://wjohn1483.github.io/2020/02/28/create-website-by-Jekyll/&quot;&gt;之前的文章&lt;/a&gt;裡面，使用了Travis CI來幫助我們使用原先Github不支援的Jekyll套件，透過Travis CI的虛擬機幫我們安裝套件以後編譯網站，最後push到master branch上。&lt;/p&gt;

&lt;p&gt;只不過因為種種的因素，現在Travis CI要開始收費了，一般沒有付費的使用者在使用完贈與的credits以後，就得要掏錢來請他們幫忙build，為了繼續當免費仔，我查詢了一下與Travis CI類似的服務，找到了Circle CI，而目前&lt;a href=&quot;https://circleci.com/pricing/&quot;&gt;Circle CI的收費方式&lt;/a&gt;是每週給你2,500個credits，大約是每週給你250分鐘的時間使用2 CPUs / 4GB RAM的機器，用來更新網站應該是綽綽有餘了。&lt;/p&gt;

&lt;h2 id=&quot;circle-ci的使用方式&quot;&gt;Circle CI的使用方式&lt;/h2&gt;

&lt;h3 id=&quot;建立設定檔&quot;&gt;建立設定檔&lt;/h3&gt;

&lt;p&gt;Circle CI和Travis CI使用的方式差不多，我們會需要在目錄底下創建&lt;strong&gt;.circleci/&lt;/strong&gt;這個資料夾，Circle CI會去讀取資料夾內的設定檔&lt;strong&gt;.circleci/config.yml&lt;/strong&gt;，來決定要怎麼build你的repository，底下是一個簡單的範例。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;orbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby@0.1.2&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build_and_push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.6.3-stretch-node&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby/default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby/bundle-install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build website&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install rsync&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo apt install -y rsync&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Push to master branch&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;if [ -z ${CIRCLE_PULL_REQUEST} ]; then&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;bash ./.circleci/push.sh&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;workflows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;update_website&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;build_and_push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;設定檔裡面我們需要自己修改的部分是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflows&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt;裡面會定義各式各樣的工作，可以想成是function一樣的地位，會執行設定好的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt;，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby/bundle-install&lt;/code&gt;是原本範本裡面就有的兩個步驟，做的事情分別是把程式碼抓下來、安裝ruby的套件，如果想要在docker裡面安裝其他套件的話，可以透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install&lt;/code&gt;來安裝。&lt;/p&gt;

&lt;p&gt;值得一提的是，在最後一步的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy&lt;/code&gt;，如果有給Circle CI Github的token的話，這步會直接幫你設定好，不需要自己在script裡面把token用環境變數帶進來。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflows&lt;/code&gt;可以想成是main function，會定義要執行哪些jobs，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filters&lt;/code&gt;是決定要不要執行這個job的條件，像上面例子的設定是只有&lt;em&gt;source branch&lt;/em&gt;的commit才會執行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build_and_push&lt;/code&gt;這個job。&lt;/p&gt;

&lt;h3 id=&quot;連結github與circle-ci&quot;&gt;連結GitHub與Circle CI&lt;/h3&gt;

&lt;p&gt;在建立好設定檔以後，接下來就是連結GitHub和Circle CI，要做的事情大概如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;創建帳號並選擇你想要連結的repository&lt;/p&gt;

    &lt;p&gt;直接上去&lt;a href=&quot;https://circleci.com&quot;&gt;Circle CI&lt;/a&gt;的網站透過GitHub帳號登入，授權以後就可以看到自己的repository了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;給予Circle CI讀取和push的權限&lt;/p&gt;

    &lt;p&gt;到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Settings&lt;/code&gt;裡面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH Keys&lt;/code&gt;，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Key&lt;/code&gt;的地方有個按鈕可以幫你跟GitHub說你想要讓Circle CI有權限push到這邊，授權完成以後就可以在畫面上看到Circle CI獲得的key了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) 設定環境變數&lt;/p&gt;

    &lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Settings&lt;/code&gt;裡面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment Variables&lt;/code&gt;可以依據個人的需要設定環境變數&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在做完上述的事情以後，接下來push的commit就會被Circle CI發現並自動幫你build了。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jtway.co/deploying-jekyll-to-github-pages-with-circleci-2-0-3eb69324bc6e&quot;&gt;Deploying Jekyll to GitHub Pages with CircleCI 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Your Name</name></author><category term="Tool" /><summary type="html">有鑒於Travis CI要開始收費了，所以我將部落格的CI轉移到Circle CI上，在這篇文章記錄一下轉移的過程。</summary></entry><entry><title type="html">Python Import Introduction</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/15/python-import/" rel="alternate" type="text/html" title="Python Import Introduction" /><published>2020-11-15T00:00:00+00:00</published><updated>2020-11-15T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/15/python-import</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/15/python-import/">&lt;p&gt;在寫python時，常搞不懂import路徑的寫法，這邊簡單介紹一下python import的邏輯。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;script-vs-module&quot;&gt;Script v.s. Module&lt;/h2&gt;

&lt;p&gt;執行python檔案有兩種方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把該檔案視為top-level script來執行：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python main.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;把它當作module執行：在其他檔案裡面透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;來執行，或是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m main.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當一個python檔案被執行的時候，它會被給予一個名字，儲存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;這個變數裡面，如果它被當作top-level script執行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;就會被指定成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;，如果被當作module執行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;會被指定成該檔案的名字加上packge的路徑。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;值得一提的是，雖然&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m main.py&lt;/code&gt;是把main.py當作module來執行，但印出來的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;仍然是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;，不過在底下執行relative import是沒有問題的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;舉例來說，如果我們當下的目錄結構長得像底下這樣&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── main.py
└── package
    └── moduleA.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當我們下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python main.py&lt;/code&gt;或是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python package/moduleA.py&lt;/code&gt;時，他們的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;，如果我們在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt;裡面&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import package.moduleA&lt;/code&gt;，並在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleA.py&lt;/code&gt;裡面把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;印出來，會發現印出來的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;會是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.moduleA&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;值得一提的是，如果你今天是直接打&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;進入interactive shell，那麼當下shell的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;就會是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;relative-import&quot;&gt;Relative Import&lt;/h2&gt;

&lt;p&gt;relative import會透過module的名字來去決定package的位置，假設我們現在稍微修改一下目錄的架構變成底下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── main.py
└── package
    ├── moduleA.py
    └── subpackage
        └── moduleB.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假如說我們用import的方式在當前目錄執行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleB.py&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from package.subpackage import moduleB&lt;/code&gt;），那麼當前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;就會是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.subpackage.moduleB&lt;/code&gt;，而我們在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleB.py&lt;/code&gt;裡面有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from .. import moduleA&lt;/code&gt;，這時python就會去&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package&lt;/code&gt;裡面尋找&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleA&lt;/code&gt;，就可以順利的import進來。&lt;/p&gt;

&lt;p&gt;但如果今天是用直接執行的方式&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python package/subpackage/moduleB.py&lt;/code&gt;，會因為&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt;為&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt;而找不到parent package，噴底下的error。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&quot;package/subpackage/moduleB.py&quot;&lt;/span&gt;, line 1, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    from .. import moduleA
ImportError: attempted relative import with no known parent package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這時可以改用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m package.subpackage.moduleB&lt;/code&gt;來把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleB.py&lt;/code&gt;當作module執行。&lt;/p&gt;

&lt;h2 id=&quot;absolute-import&quot;&gt;Absolute Import&lt;/h2&gt;

&lt;p&gt;根據當前執行目錄的絕對路徑來import module，值得一提的是，當前執行的目錄並不是你執行python時所在的目錄，而是top-level script所在的目錄。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── main.py
└── package
    ├── moduleA.py
    └── subpackage
        └── moduleB.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上面的結構來說，若我在當前目錄&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./&lt;/code&gt;執行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python package/moduleA.py&lt;/code&gt;，那麼若要在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleA.py&lt;/code&gt;裡面import moduleB，就得要用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from subpackage import moduleB&lt;/code&gt;，而不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from package.subpackage import moduleB&lt;/code&gt;，因為&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moduleA.py&lt;/code&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./package&lt;/code&gt;裡面，python會從那邊起始點。&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time&quot;&gt;Relative imports for the billionth time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Your Name</name></author><category term="Python" /><summary type="html">在寫python時，常搞不懂import路徑的寫法，這邊簡單介紹一下python import的邏輯。</summary></entry><entry><title type="html">Deep Reinforcement Learning for Online Advertising in Recommender Systems</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/04/deep-reinforcement-learning-for-online-advertising-in-recommender-systems/" rel="alternate" type="text/html" title="Deep Reinforcement Learning for Online Advertising in Recommender Systems" /><published>2020-11-04T00:00:00+00:00</published><updated>2020-11-04T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/04/deep-reinforcement-learning-for-online-advertising-in-recommender-systems</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/11/04/deep-reinforcement-learning-for-online-advertising-in-recommender-systems/">&lt;p&gt;用Reinforcement Learning來訓練廣告系統，決定廣告該要怎麼顯現。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;簡介&quot;&gt;簡介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1909.03602.pdf&quot;&gt;這篇paper&lt;/a&gt;想要使用Reinforcement Learning來解決廣告系統當中，廣告曝光數以及使用者體驗的平衡，當廣告曝光的越多，使用者體驗就會下降，反之，沒有廣告的曝光，平台本身的獲利就會減少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;advertising_scenario.png&quot; alt=&quot;Advertising Scenario&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這篇paper當中，假設平台本身已經有一個很好的推薦系統，每當使用者發request進來的時候，便會推薦使用者感興趣的內容，而這篇paper想要研究的就是中間的Advertising Agent，並解決底下息息相關的三個問題&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;要不要在本次的推薦當中安插廣告？&lt;/li&gt;
  &lt;li&gt;如果要放廣告，那要放哪一個廣告？&lt;/li&gt;
  &lt;li&gt;放在推薦的內容中的哪一個位置？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;作者提出的模型如下圖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;proposed_architecture.png&quot; alt=&quot;Proposed Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;模型的輸入總共有五個&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(p^{rec}_t\)：使用者過去所看過內容的feature，把過去每個時間點看過的內容的feature都丟進GRU裡面取最後一個時間點的hidden state&lt;/li&gt;
  &lt;li&gt;\(p^{ad}_t\)：使用者過去所看過廣告的feature，把過去每個時間點看過的廣告的feature都丟進GRU裡面取最後一個時間點的hidden state&lt;/li&gt;
  &lt;li&gt;\(c_t\)：使用者的資訊，像是使用的是iOS還是Android等等基本的資訊&lt;/li&gt;
  &lt;li&gt;\(rec_t\)：當前推薦內容的feature，把所有的內容的feature接在一塊過一層layer，\(rec_t=\tanh(W_{rec}concat(rec_1, ..., rec_L)+b_{rec})\)&lt;/li&gt;
  &lt;li&gt;\(a^{ad}_t\)：廣告的feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把上面四個合併在一起就是代表使用者狀態的\(s_t\)，\(s_t=concat(p^{rec}_t,p^{ad}_t,c_t,rec_t)\)。&lt;/p&gt;

&lt;p&gt;左圖(a)為作者一開始想到的模型架構，藉由把使用者的狀態\(s_t\)和廣告的feature \(a^{ad}_t\)餵進去，讓model去預測把廣告插在不同位置的分數，\(Q(s_t,a^{ad}_t)^1, Q(s_t,a^{ad}_t)^2\)代表的便是插在位置1和2的分數，而紅色圈圈的\(Q(s_t,a^{ad}_t)^0\)是不插廣告的分數，讓一次model的predict就可以一次解決上述的三個問題（要決定插哪一個廣告就把所有候選的廣告都丟進model裡面去predict，取最高分的）。&lt;/p&gt;

&lt;p&gt;當今天使用者的體驗不錯的時候，可以適時地加入廣告增加平台收入，而當使用者體驗不好的時候，就不應該插入廣告，作者想要將這樣的概念加入至model當中，所以架構從(a)修改成了(b)，左邊的\(V(s_t)\)的輸入只有使用者的\(s_t\)，代表使用者到現在的體驗如何，而右邊的\(A(s_t,a^{ad}_t)\)多加入了廣告的feature，代表插入廣告以後的分數如何，而最終的分數便是兩者的加總。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;classic_architecture.png&quot; alt=&quot;Classic Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者所提出來的架構跟原本DQN的架構類似，只是又多了一個維度，如果使用上圖的(a)、(b)，和上上圖的(a)架構來玩倉庫番的話，他們的概念是這樣子的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上圖(a)：給定遊戲畫面（\(s_t\)），預測往上下左右走的分數（\(Q(s_t,a)^1,...,Q(s_t,a)^{k+1}\)）&lt;/li&gt;
  &lt;li&gt;上圖(b)：給定遊戲畫面（\(s_t\)）和動作（往上\(a_t\)），model會預測出這個組合的分數&lt;/li&gt;
  &lt;li&gt;上上圖(a)：給定遊戲畫面（\(s_t\)）和動作（往上\(a_t\)），model會預測出往上走0步、1步、n步的分數（\(Q(s_t,a)^0,...,Q(s_t,a)^{k+1}\)）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;實驗&quot;&gt;實驗&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;performance_comparison.png&quot; alt=&quot;Performance Comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者首先將這個model（DEAR）與其他RL的model做比較，可以看到這篇paper model的表現是最好的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;component_study.png&quot; alt=&quot;Component Study&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再來作者將model去掉一部份，看看各個部件對performance的影響。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DEAR-1：將Reinforcement Learning改成Supervised Learning&lt;/li&gt;
  &lt;li&gt;DEAR-2：把使用者過去所看過內容的feature，從GRU改成Dense&lt;/li&gt;
  &lt;li&gt;DEAR-3：在原本DQN架構圖(b)的架構，並多在輸入的地方接一個1-hot vector代表廣告要插在哪一個位置&lt;/li&gt;
  &lt;li&gt;DEAR-4：不把\(V(s_t)\)和\(A(s_t,a^{ad}_t)\)分開算，也就是作者所提出的架構圖中的(a)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到最終版本的架構的表現最好。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;在這篇paper裡面，作者結合了兩個傳統DQN的架構，多衍伸出了一個維度，來一次性解決廣告系統需要決定的三件事情，這樣的架構除了用在廣告系統上，還可以應用在其他的任務當中。&lt;/p&gt;</content><author><name>Your Name</name></author><category term="Paper" /><category term="Reinforcement-Learning" /><category term="Recommendation-System" /><summary type="html">用Reinforcement Learning來訓練廣告系統，決定廣告該要怎麼顯現。</summary></entry><entry><title type="html">REINFORCE和Proximal Policy Optimization</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/07/26/reinforce-and-ppo/" rel="alternate" type="text/html" title="REINFORCE和Proximal Policy Optimization" /><published>2020-07-26T00:00:00+00:00</published><updated>2020-07-26T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/07/26/reinforce-and-ppo</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/07/26/reinforce-and-ppo/">&lt;p&gt;在製作model的時候，有時會參雜一些人工定義分數的部分，這時我們就不能夠單純使用gradient descent來訓練我們的model，因為人工定義的分數是無法被微分的，然而我們還是可以靠一些方式來把這些分數整合到model的objective function中，並利用我們熟悉的gradient descent來訓練。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;reinforce&quot;&gt;REINFORCE&lt;/h2&gt;

&lt;p&gt;首先，我們先來定義一下state、action和reward之間的關係。當機器看到眼前的state \(s_1\)時，會根據自身的演算法決定做出動作\(a_1\)，此時環境會根據機器做出的\(a_1\)給予reward \(r_1\)，而隨著這個動作，機器所看到的state會從\(s_1\)轉移到\(s_2\)，接著機器會根據\(s_2\)做出動作\(a_2\)，並獲得\(r_2\)，以此類推。而我們的目標就是希望機器能學會一個厲害的policy，使得expected reward最大。&lt;/p&gt;

\[\begin{aligned} expected\ reward &amp;amp; =\sum R(\tau)p_\theta(\tau)\\ &amp;amp; =\mathbb{E}_{\tau\sim p_\theta(\tau)}[R(\tau)] \end{aligned}\]

&lt;p&gt;其中\(\tau\)是trajectory，指的是\(\left[ s_1, a_1, s_2, a_2, ... \right]\)的序列，而\(R(\tau)\)是序列\(\tau\)中所獲得的所有\(r_i\)的總和、\(\theta\)是policy的參數、\(p_\theta(\tau)\)是序列\(\tau\)出現的機率，因為policy會影響到action \(a_i\)的產生，所以\(\tau\)的機率跟\(\theta\)有關。&lt;/p&gt;

&lt;p&gt;若我們以expected reward為objective function，對它做微分，我們可以得到&lt;/p&gt;

\[\begin{aligned}\bigtriangledown R_\theta &amp;amp;= \sum R(\tau) \bigtriangledown p_\theta(\tau) \end{aligned}\]

&lt;p&gt;因為\(R(\tau)\)是由環境給予的，亦可以是人工定義的，跟policy的參數沒有什麼關係，所以當我們做微分的時候不會有什麼影響，接著再稍微整理一下&lt;/p&gt;

\[\begin{aligned} \bigtriangledown R_\theta &amp;amp;= \sum R(\tau)\bigtriangledown p_\theta(\tau) \\ &amp;amp;= \sum R(\tau) p_\theta(\tau)\frac{\bigtriangledown p_\theta(\tau)}{p_\theta(\tau)} \\ &amp;amp;= \sum R(\tau)p_\theta(\tau)\bigtriangledown\log p_\theta(\tau) \\ &amp;amp;= \mathbb{E}_{\tau\sim p_\theta(\tau)} [R(\tau)\bigtriangledown\log p_\theta(\tau)] \\ &amp;amp;\approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}R(\tau^n)\bigtriangledown\log p_\theta(\tau^n) \\ &amp;amp;\approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}R(\tau^n)\bigtriangledown\log p_\theta(a_t^n\vert s_t^n) \end{aligned}\]

&lt;p&gt;在式子最後所得出來的式子，其實跟常見的、label是one-hot vector的cross entropy很類似，只不過多出了\(R(\tau^n)\)，在概念上可以想像成，每一步都在讓model自己產生的action的log probability越大越好，但是用\(R(\tau^n)\)來控制log probability要多大。&lt;/p&gt;

&lt;h3 id=&quot;advantage&quot;&gt;Advantage&lt;/h3&gt;

&lt;p&gt;在前面的段落裡，我們可以看到，當環境給予的reward都是正值的時候，objective function裡\(R(\tau^n)\)這項的值會是正的，使得在\(s_t^n\)時，機器所採取的任何一個\(a_t^n\)的log probability都是會漸漸變大的，雖說隨著時間的拉長，能獲得較大reward的\(a_t^n\)的log probability應該會是最大的，然而訓練起來要花的時間就會比較多，因此通常在訓練的時候，會稍微調整一下objective function，變成底下&lt;/p&gt;

\[\bigtriangledown R_\theta=\frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}[R(\tau^n)-b]\bigtriangledown\log p_\theta(a_t^n\vert s_t^n),\ b=\mathbb{E}[R(\tau)]\]

&lt;p&gt;這邊的\(b\)是trajectory的平均reward，使得\([R(\tau^n)-b]\)這項的意思變成，這個action \(a_t^n\)相對於平均而言有多好。&lt;/p&gt;

&lt;p&gt;而再更精細的去看objective function會發現\(R(\tau^n)\)代表的是整個trajectory的reward，但卻用來衡量每個時間點\(a_t^n\)的好壞，這樣有一點不太公平，可能在某個\(s_t^n\)採取\(a_t^n\)對拿到reward是很有幫助的，但因為其他action表現得不好，使得整個trajectory拿到的reward低於平均，這時這個好的action的log probability就會被降低，為了讓前面這項更能反映每個action的好壞，會再修改成&lt;/p&gt;

\[\bigtriangledown R_\theta=\frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}\left[ \sum\limits_{t^\prime=t}\limits^{T_n}\gamma^{t^\prime-t}r_{t^\prime}^n-b \right]\bigtriangledown\log p_\theta(a_t^n\vert s_t^n),\ \gamma&amp;lt;1\]

&lt;p&gt;也就是用該action未來的reward再稍微打個折以後加總起來，當作是這個action有多好，而前面中括號裡的這項通常會被拉出來變成\(A^\theta(s_t,a_t)\)稱為advantage function用以衡量在\(s_t\)採取\(a_t\)相較其他action有多好。&lt;/p&gt;

&lt;h2 id=&quot;proximal-policy-optimization-ppo&quot;&gt;Proximal Policy Optimization (PPO)&lt;/h2&gt;

&lt;h3 id=&quot;on-policy-vs-off-policy&quot;&gt;On-policy v.s. Off-policy&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;On-policy：要訓練的model正是與環境互動的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Off-policy：要訓練的model和與環境互動的model不同&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在前面REINFORCE的式子裡面我們可以看到它是一個on-policy的方法，那on-policy的方法需要很長的訓練時間，因為跟環境互動完的trajectory拿來更新一次model的參數以後就不能夠再被使用了，因為新的model所採取的action會不一樣，而PPO就是嘗試把REINFORCE從on-policy變成off-policy，好讓訓練時間縮短。&lt;/p&gt;

&lt;h3 id=&quot;importance-sampling&quot;&gt;Importance Sampling&lt;/h3&gt;

&lt;p&gt;PPO使用的便是將importance sampling融入進objective function裡面，這邊先提一下什麼是importance sampling。&lt;/p&gt;

&lt;p&gt;在一般我們計算從某個機率分佈\(p\)抽樣出\(x\)的\(f(x)\)的期望值時，會寫成底下的式子&lt;/p&gt;

\[\mathbb{E}_{x\sim p}[f(x)] \approx \frac{1}{N}\sum\limits_{i=1}\limits^{N}f(x_i)\]

&lt;p&gt;倘若今天因為某種特殊的原因，使得我們無法直接從機率分佈\(p\)直接抽樣的時候，我們可以使用另外一個機率分佈\(q\)抽樣出\(x\)再經過\(p\)、\(q\)之間的轉換來達到一樣的結果&lt;/p&gt;

\[\begin{aligned} \mathbb{E}_{x\sim p}[f(x)] &amp;amp;=\int f(x)p(x)dx \\ &amp;amp;= \int f(x)\frac{p(x)}{q(x)}q(x)dx \\ &amp;amp;= \mathbb{E}_{x\sim q}\left[ f(x)\frac{p(x)}{q(x)} \right] \end{aligned}\]

&lt;p&gt;而importance sampling代表的就是底下的式子&lt;/p&gt;

\[\mathbb{E}_{x\sim p}[f(x)]=\mathbb{E}_{x\sim q}\left[f(x)\frac{p(x)}{q(x)}\right]\]

&lt;p&gt;雖然看起來當機率分佈\(p\)無法被取樣的時候，我們可以使用任意的機率分佈\(q\)來替代，但這其中還是會有一些誤差，我們知道一個機率分佈的變異數的算法如下&lt;/p&gt;

\[Var[X]=\mathbb{E}[X^2]-(\mathbb{E}[X])^2\]

&lt;p&gt;機率分佈\(p\)的變異數為&lt;/p&gt;

\[Var_{x\sim p}[f(x)]=\mathbb{E}_{x\sim p}[f(x)^2]-(\mathbb{E}_{x\sim p}[f(x)])^2\]

&lt;p&gt;如果使用importance sampling來得到的變異數為&lt;/p&gt;

\[\begin{aligned} Var_{x\sim q}\left[f(x)\frac{p(x)}{q(x)}\right] &amp;amp;=\mathbb{E}_{x\sim q}\left[f(x)^2\frac{p(x)^2}{q(x)^2}\right]-\left(\mathbb{E}_{x\sim q}\left[f(x)\frac{p(x)}{q(x)}\right]\right)^2 \\ &amp;amp;= \mathbb{E}_{x\sim p}\left[f(x)^2\frac{p(x)}{q(x)}\right]-\left(\mathbb{E}_{x\sim p}[f(x)]\right)^2\end{aligned}\]

&lt;p&gt;從上式我們可以看到，當機率分佈\(p\)和\(q\)兩者的差異過大的時候，會造成兩者的變異數也相差很多，所以在使用importance sampling的時候，使用機率分佈較近的\(q\)是很重要的。&lt;/p&gt;

&lt;h3 id=&quot;ppo&quot;&gt;PPO&lt;/h3&gt;

&lt;p&gt;在這裡，我們想要將前面的REINFORCE從on-policy換成off-policy，讓原先跟環境做互動的\(\pi_\theta\)換成\(\pi_{\theta^\prime}\)，為此我們套用上面的importance sampling&lt;/p&gt;

\[\begin{aligned} \bigtriangledown R_\theta &amp;amp;= \mathbb{E}_{(s_t,a_t)\sim\pi_\theta} \left[ A^\theta(s_t,a_t)\bigtriangledown\log p_\theta(a_t^n\vert s_t^n)\right] \\ &amp;amp;= \mathbb{E}_{(s_t,a_t)\sim\pi_{\theta^\prime}}\left[\frac{p_\theta(s_t, a_t)}{p_{\theta^\prime}(s_t, a_t)}A^\theta(s_t,a_t)\bigtriangledown\log p_\theta(a_t^n\vert s_t^n)\right] \\ &amp;amp;= \mathbb{E}_{(s_t,a_t)\sim\pi_{\theta^\prime}}\left[\frac{p_\theta(a_t\vert s_t)}{p_{\theta^\prime}(a_t\vert s_t)}\frac{p_\theta(s_t)}{p_{\theta^\prime}(s_t)}A^{\theta^\prime}(s_t,a_t)\bigtriangledown\log p_\theta(a_t^n\vert s_t^n)\right] \end{aligned}\]

&lt;p&gt;從第二行到第三行中間做了一件特別的事情，這裡假設\(\pi_\theta\)和\(\pi_{\theta^\prime}\)所能得到的reward是差不多的，所以將\(\theta\)跟環境做互動得到的\(A^\theta(s_t,a_t)\)替換成了\(A^{\theta^\prime}(s_t,a_t)\)。&lt;/p&gt;

&lt;p&gt;而又假設一個state \(s_t\)被觀測到的機率其實跟model沒有什麼關係的話，\(\frac{p_\theta(s_t)}{p_{\theta^\prime}(s_t)}\)就可以忽略不看，最終我們就可以得到底下的式子做為我們的objective function&lt;/p&gt;

\[J^{\theta^\prime}(\theta)=\mathbb{E}_{(s_t,a_t)\sim\pi_{\theta^\prime}}\left[\frac{p_\theta(a_t\vert s_t)}{p_{\theta^\prime}(a_t\vert s_t)}A^{\theta^\prime}(s_t,a_t)\right]\]

&lt;p&gt;因為\(\bigtriangledown f(x)=f(x)\bigtriangledown\log f(x)\)，我們可以得到\(\bigtriangledown p_\theta(a_t\vert s_t)=p_\theta(a_t\vert s_t)\bigtriangledown\log p_\theta(a_t\vert s_t)\)&lt;/p&gt;

&lt;p&gt;但由於importance sampling在兩個機率分佈差異很大的時候會讓結果壞掉，所以PPO做的事情便是在objective function裡面多加\(\beta KL(\theta, \theta^\prime)\)這項，其中\(\beta\)是一個hyperparameter，讓兩個機率分佈差異不要太大&lt;/p&gt;

\[J_{PPO}^{\theta^\prime}=J^{\theta^\prime}(\theta)-\beta KL(\theta, \theta^\prime)\]

&lt;p&gt;值得一提的是，這邊的\(KL()\)不是只兩個model參數之間的KL divergence，而是兩者的output，也就是兩者的behavior所算出來的KL divergence。&lt;/p&gt;

&lt;p&gt;而PPO的前身，TRPO的式子跟PPO幾乎一樣，只是它把KL這項當作是一個限制，在實作起來會比起PPO來要來得複雜得多。&lt;/p&gt;

\[J_{TRPO}^{\theta^\prime}(\theta)=J^{\theta^\prime}(\theta),\ KL(\theta, \theta^\prime)&amp;lt;\delta\]

&lt;h2 id=&quot;參考資料&quot;&gt;參考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OAKAZhFmYoI&quot;&gt;DRL Lecture 2:  Proximal Policy Optimization (PPO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Your Name</name></author><category term="Reinforcement-Learning" /><summary type="html">在製作model的時候，有時會參雜一些人工定義分數的部分，這時我們就不能夠單純使用gradient descent來訓練我們的model，因為人工定義的分數是無法被微分的，然而我們還是可以靠一些方式來把這些分數整合到model的objective function中，並利用我們熟悉的gradient descent來訓練。</summary></entry><entry><title type="html">如何製作Slack機器人</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/05/07/slack-bot/" rel="alternate" type="text/html" title="如何製作Slack機器人" /><published>2020-05-07T00:00:00+00:00</published><updated>2020-05-07T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/05/07/slack-bot</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/05/07/slack-bot/">&lt;p&gt;這篇文章紀錄一下如何透過GCP製作一個簡單的slack機器人。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;目標&quot;&gt;目標&lt;/h2&gt;

&lt;p&gt;由於一些原因，使我想要製作一個slack機器人，來幫助我將slack上的訊息貼到某個google sheet上，底下將會介紹我如何做到這件事情。&lt;/p&gt;

&lt;h2 id=&quot;google-cloud-platform-gcp&quot;&gt;Google Cloud Platform (GCP)&lt;/h2&gt;

&lt;p&gt;在開始製作slack機器人之前，我們需要先找到一個24小時不間斷運行的機器來執行我們的機器人程式，而這個機器最好有public IP，來讓slack可以透過這個IP跟機器人互動，最終，我選擇了Google Cloud Platform (GCP)來放我的機器人，因為它現在有&lt;a href=&quot;https://cloud.google.com/free/docs/gcp-free-tier?hl=zh-tw&quot;&gt;「一律免費」的方案&lt;/a&gt;可以使用，這個方案的額度允許你永久免費使用一個f1-micro的機器，還搭配有一個public IP，詳細的使用資訊可以參考連接中&lt;strong&gt;Compute Engine&lt;/strong&gt;的部分。&lt;/p&gt;

&lt;h3 id=&quot;註冊&quot;&gt;註冊&lt;/h3&gt;

&lt;p&gt;註冊的部分就照著&lt;a href=&quot;https://cloud.google.com/&quot;&gt;官網&lt;/a&gt;的指示一步一步填寫資料就完成了，不過這邊會需要填寫信用卡資料，當你使用超過免費的額度的時候會從信用卡扣款。&lt;/p&gt;

&lt;h3 id=&quot;開啟虛擬機&quot;&gt;開啟虛擬機&lt;/h3&gt;

&lt;p&gt;在註冊完成了以後就可以準備來開啟一個虛擬機了，可以直接到&lt;a href=&quot;https://console.cloud.google.com/projectselector/compute/instances&quot;&gt;Compute Engine&lt;/a&gt;這邊選擇，如果你沒有新增過任何專案的話，這邊會提示你新增一個專案，如果已經有建立好專案了，就可以直接選擇它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;wait-vm.png&quot; alt=&quot;Wait for VM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊可能會需要一點時間來設定一些東西，當設定完成了以後就可以按下&lt;strong&gt;建立&lt;/strong&gt;，來設定虛擬機的規格。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;vm-settings.png&quot; alt=&quot;VM settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果要使用f1-micro的機器，也就是一律免費所提供的機型的話，在區域的部分只能選美國，接著就是在機器類型的地方選擇f1-micro，這時在畫面的右上角就應該可以看到一律免費所提供的免費時數。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;vm-image.png&quot; alt=&quot;VM image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下方開機磁碟的部分，可以選擇自己喜歡的作業系統，而一律免費的方案提供你30GB的HDD硬碟可以使用，記得要在這邊把容量改成30GB。&lt;/p&gt;

&lt;p&gt;最後按下建立就能成功建立一個虛擬機了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;vm-ip.png&quot; alt=&quot;VM IP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊可以看到虛擬機的內部IP和外部IP，而想要在虛擬機裡面下指令的話，可以點選右邊SSH的按鈕，會在瀏覽器裡面幫你開啟一個terminal，你就能任意的安裝、執行你想要的程式碼了。&lt;/p&gt;

&lt;h3 id=&quot;防火牆&quot;&gt;防火牆&lt;/h3&gt;

&lt;p&gt;在開好虛擬機以後，接著就是希望slack傳送的資料可以被虛擬機接收到，為此需要開通防火牆，可以點選虛擬機旁邊設定中的&lt;strong&gt;查看網路詳細資料&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;go-network-settings.png&quot; alt=&quot;Go network settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著點選左邊的&lt;strong&gt;防火牆規則&lt;/strong&gt;、右邊的&lt;strong&gt;建立防火牆規則&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;go-firewall-settings.png&quot; alt=&quot;Go firewall settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自行設定一下需要的網路設定，按下&lt;strong&gt;建立&lt;/strong&gt;就完成了，如此一來就能讓slack透過你所設定的port進行溝通。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;firewall-settings.png&quot; alt=&quot;Firewall settings&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;slack-bot&quot;&gt;Slack Bot&lt;/h2&gt;

&lt;p&gt;在有了可以跑slack bot的虛擬機以後，接著便是來創建slack bot。&lt;/p&gt;

&lt;h3 id=&quot;創建slack-app並選擇bot&quot;&gt;創建Slack app並選擇Bot&lt;/h3&gt;

&lt;p&gt;首先我們會先需要在&lt;a href=&quot;https://api.slack.com/apps&quot;&gt;slack API中創建一個application&lt;/a&gt;，並且選擇我們這個application的種類。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;slack-app-feature.png&quot; alt=&quot;Slack API features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著會需要告訴slack說這個bot需要的權限有哪些，可以點選左邊的&lt;strong&gt;OAuth &amp;amp; Permissions&lt;/strong&gt;，在底下的&lt;strong&gt;Scopes&lt;/strong&gt;新增想要的權限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;slack-app-scope.png&quot; alt=&quot;Slack Scopes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這邊我選擇了兩個權限，分別是讓bot有權可以讀取它被mention的訊息，以及以bot的帳戶傳送訊息到channel中。選擇好權限以後，就能在上圖最上方點選把bot安裝到你的workspace中(由於我已經安裝過了，所以現在顯示&lt;strong&gt;Reinstall App&lt;/strong&gt;)。&lt;/p&gt;

&lt;h3 id=&quot;event-subscription&quot;&gt;Event Subscription&lt;/h3&gt;

&lt;p&gt;至此，我們應該已經可以在slack中看到我們所創建的bot帳戶，接著就是希望bot可以在事件發生時(在這邊是希望被mention的時候)，可以有適當的反應，而slack這邊的做法其實就是當事件發生的時候，會傳送一個HTTP POST request到你所設定的網址，所以我們只需要在前面創立的虛擬機裡面，架設一個Web server來接受slack的POST request就行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;slack-event-subscription.png&quot; alt=&quot;Slack Event Subscription&quot; /&gt;&lt;/p&gt;

&lt;p&gt;值得一提的是，在設定slack要傳送的POST位址時，slack為確保網址是活著的，所以在設定的時候就會傳送一個POST request過去，裡面會包含一個&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge&lt;/code&gt;的參數，我們會需要直接return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenge&lt;/code&gt;這個參數的內容給slack才可以設定成功。&lt;/p&gt;

&lt;h3 id=&quot;傳送訊息&quot;&gt;傳送訊息&lt;/h3&gt;

&lt;p&gt;至於怎麼創立Web server跟slack互動以及傳送訊息至channel裡，可以參考&lt;a href=&quot;https://github.com/SlackAPI/python-slackclient&quot;&gt;Slack的python-slackclient&lt;/a&gt;裡面的&lt;a href=&quot;https://github.com/slackapi/python-slackclient/tree/master/tutorial&quot;&gt;tutorial&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;簡單來說，上面的例子就是使用Flask建立一個Web server，不過會需要&lt;a href=&quot;https://github.com/slackapi/python-slackclient/blob/master/tutorial/PythOnBoardingBot/app.py#L12-L15&quot;&gt;使用到這個bot的憑證&lt;/a&gt;(可以看tutorial裡面的截圖)，接著就是設定一些&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack_events_adapter&lt;/code&gt;來處理不同的event。&lt;/p&gt;

&lt;p&gt;不過我個人使用時，不知道為什麼&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack_events_adapter&lt;/code&gt;好像沒有什麼用處，我自己的程式碼是長得像底下這樣的。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slack&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slackeventsapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackEventAdapter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;slack_events_adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackEventAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slack_signing_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/slack/events&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;slack_web_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slack_bot_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_handling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Incoming payload&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Slack need to check application is valid
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;challenge&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Check accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;challenge&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Handle slack events
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;event_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thread_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;thread_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app_mention&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Do what you want to do here
&lt;/span&gt;            
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slack_web_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat_postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_ts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中最後一行是把訊息傳送到slack的API，其中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;channel_id&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts&lt;/code&gt;是從slack的POST request來的，分別是channel的id和thread的ts，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_message&lt;/code&gt;是一個單純的string，在呼叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chat_postMessage()&lt;/code&gt;以後，就會將訊息回覆在thread中，若想要直接回覆在群組中，只需要把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chat_postMessage()&lt;/code&gt;裡的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_ts&lt;/code&gt;部分拿掉就可以了。&lt;/p&gt;

&lt;h2 id=&quot;與google-sheet互動&quot;&gt;與Google Sheet互動&lt;/h2&gt;

&lt;p&gt;當初創立這個Bot的目的是希望把一些東西貼到google sheet上，在這邊介紹一下怎麼用command line來跟google sheet互動，使用的套件是&lt;a href=&quot;https://github.com/burnash/gspread&quot;&gt;gspread&lt;/a&gt;，這邊的介紹主要是參考&lt;a href=&quot;https://towardsdatascience.com/accessing-google-spreadsheet-data-using-python-90a5bc214fd2&quot;&gt;Accessing Google Spreadsheet Data using Python&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;建立service-account&quot;&gt;建立service account&lt;/h3&gt;

&lt;p&gt;為了要讓Bot可以修改google sheet，我們需要為他建立一個google bot帳號，來在google sheet的設定裡賦予它編輯者的權限，而設定的方法也很簡單，首先先去google clound console選擇&lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt;的&lt;strong&gt;Library&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;google-api-library.png&quot; alt=&quot;Google API Library&quot; /&gt;&lt;/p&gt;

&lt;p&gt;並在跳出來的畫面搜尋&lt;strong&gt;Google Sheets API&lt;/strong&gt;，點進去並啟用以後，應該會引導到底下的畫面，新增一個新的credential。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1300/1*XVy7hsGwyiNwSx-7hQXL8A.png&quot; alt=&quot;Add credential&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;需要記得把上圖中的Which API are you using換成Google Sheets API&lt;/strong&gt;，完成了以後我們可以得到一個json檔，裡面包含了一些credential來讓我們使用Google Sheets API。&lt;/p&gt;

&lt;p&gt;印象中在建立的途中會提示你建立一個service account，只需要填寫一個代表這個bot的名字就可以獲得一個電子信箱位址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;google-credential.png&quot; alt=&quot;Google credential&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以去&lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt;的&lt;strong&gt;Credentials&lt;/strong&gt;裡面去看到是否有一個domain name為&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iam.gserviceaccount.com&lt;/code&gt;的電子信箱，最後就是將這電子信箱加入google sheet的協作者就可以了。&lt;/p&gt;

&lt;h3 id=&quot;gspread&quot;&gt;gspread&lt;/h3&gt;

&lt;p&gt;至此，bot已經有權限可以修改google sheet了，最後就是透過gspread來跟google sheet做互動，範例的程式碼如下。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gspread&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oauth2client.service_account&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceAccountCredentials&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;https://spreadsheets.google.com/feeds&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceAccountCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_json_keyfile_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;/path/to/your/credential.json&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gspread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_by_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sheet1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/to/you/credential.json&lt;/code&gt;是前面所下載的json檔，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sheet_url&lt;/code&gt;是你google sheet的網址，其他gspread的使用方法可以參考它的&lt;a href=&quot;https://gspread.readthedocs.io/en/latest/&quot;&gt;documentation&lt;/a&gt;。&lt;/p&gt;</content><author><name>Your Name</name></author><category term="Tool" /><summary type="html">這篇文章紀錄一下如何透過GCP製作一個簡單的slack機器人。</summary></entry><entry><title type="html">用R來作圖</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/04/25/plot-data-with-r/" rel="alternate" type="text/html" title="用R來作圖" /><published>2020-04-25T00:00:00+00:00</published><updated>2020-04-25T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/04/25/plot-data-with-r</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2020/04/25/plot-data-with-r/">&lt;p&gt;在以前有聽聞說R語言很適合用來畫圖，方便人們來觀察資料的特性，這篇粗淺的紀錄一下我用過的一些作圖function。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;安裝r和rstudio&quot;&gt;安裝R和RStudio&lt;/h2&gt;

&lt;p&gt;可以在&lt;a href=&quot;http://lib.stat.cmu.edu/R/CRAN/&quot;&gt;CMU的網站上&lt;/a&gt;下載R的安裝檔，並在&lt;a href=&quot;https://rstudio.com/products/rstudio/download/&quot;&gt;RStudio&lt;/a&gt;的官網上下載RStudio，在完成這兩件事情以後，應該就能順利的在電腦上使用RStudio撰寫R的script了。&lt;/p&gt;

&lt;h2 id=&quot;資料的讀寫&quot;&gt;資料的讀寫&lt;/h2&gt;

&lt;p&gt;在準備好環境以後，接下來就是去將資料讀取進來，而在讀取的部分只需要打上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read.csv()&lt;/code&gt;就能輕鬆的把csv檔讀進來了。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read.csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[path to your csv file]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而且R還有提供一些貼心的function，像是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;summary()&lt;/code&gt;：可以幫你簡單的總結一下這分檔案的基本資料、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View()&lt;/code&gt;：可以在RStudio裡面以表格的方式打開這個csv檔，方便人們閱覽。&lt;/p&gt;

&lt;h2 id=&quot;折線圖&quot;&gt;折線圖&lt;/h2&gt;

&lt;p&gt;若今天的資料形式適合畫折線圖來觀察趨勢的話，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggplot()&lt;/code&gt;來幫助你畫折線圖。&lt;/p&gt;

&lt;h3 id=&quot;橫軸是其中一個欄位&quot;&gt;橫軸是其中一個欄位&lt;/h3&gt;

&lt;p&gt;假設今天的資料&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.csv&lt;/code&gt;長得像底下這樣。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;20200101&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200102&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200103&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200104&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200105&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;單一變數作圖&quot;&gt;單一變數作圖&lt;/h4&gt;

&lt;p&gt;如果我們希望以日期為橫軸、A的值作為縱軸畫出來的話，直接打上底下的程式碼就行。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read.csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geom_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;line-a.png&quot; alt=&quot;Line A&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的程式碼中，首先先引入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggplot2&lt;/code&gt;這個畫圖的library，再來&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggplot(data)&lt;/code&gt;可以想成是我現在想要以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;這個dataframe作圖，而我想要的形式是線，亦即&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geom_line()&lt;/code&gt;，而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes()&lt;/code&gt;宣告了這條線的x、y軸的資料要從哪一個column中做選取。&lt;/p&gt;

&lt;h4 id=&quot;多變數作圖&quot;&gt;多變數作圖&lt;/h4&gt;

&lt;p&gt;倘若想要以日期作為橫軸、A和B的值作為縱軸畫在同一張圖片上，並以不同的顏色區分開來，可以參考底下的程式碼。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read.csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id.vars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geom_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;line-ab.png&quot; alt=&quot;Line A, B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在這邊我們多引入了一個叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reshape2&lt;/code&gt;的library幫我們把dataframe melt一下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melt()&lt;/code&gt;這個function所做的事情是把dataframe的資料以我們所設定好的column打散。&lt;/p&gt;

&lt;p&gt;以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melt(data, id.vars=&quot;date&quot;)&lt;/code&gt;這個例子來說，我們會固定&lt;strong&gt;date&lt;/strong&gt;這個column，將&lt;strong&gt;A&lt;/strong&gt;、&lt;strong&gt;B&lt;/strong&gt;這兩個column的資料打散，想法上是去看說&lt;strong&gt;date&lt;/strong&gt;這個column有個值是&lt;em&gt;20200101&lt;/em&gt;，其對應到的column &lt;strong&gt;A&lt;/strong&gt;的值是&lt;em&gt;0.3&lt;/em&gt;，對應到&lt;strong&gt;B&lt;/strong&gt;的值是&lt;em&gt;0.5&lt;/em&gt;，所以會分別產生&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(20200101, A, 0.3)&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(20200101, B, 0.5)&lt;/code&gt;這兩筆資料，並持續進行下去直到&lt;strong&gt;date&lt;/strong&gt;的所有值都看過，也因此經過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melt()&lt;/code&gt;以後，我們可以得到以下的dataframe。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;variable&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;20200101&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200102&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200103&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200104&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200105&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200101&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200102&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200103&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200104&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20200105&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;值得一提的是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melt()&lt;/code&gt;可以指定新的欄位名稱，使你在作圖時的橫軸、縱軸能用自定義的名稱。舉例來說，我想要將&lt;strong&gt;variable&lt;/strong&gt;換成type、&lt;strong&gt;value&lt;/strong&gt;換成score的話，可以參考底下程式碼。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;melt_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id.vars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable.name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value.name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了這樣子的dataframe以後，就可以填入至&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes()&lt;/code&gt;裡面，變成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aes(x=date, y=value, group=variable, color=variable)&lt;/code&gt;，告訴它我們想要以&lt;strong&gt;date&lt;/strong&gt;為橫軸&lt;strong&gt;value&lt;/strong&gt;為縱軸，其中每個值有它所屬的group，以&lt;strong&gt;variable&lt;/strong&gt;為標示，而我希望每個group以不同顏色標示，如此便能畫出我們所想要的圖了。&lt;/p&gt;

&lt;h3 id=&quot;橫軸不是其中一個欄位&quot;&gt;橫軸”不”是其中一個欄位&lt;/h3&gt;

&lt;p&gt;如果說今天手上的資料長成底下這樣。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;date20200101&lt;/th&gt;
      &lt;th&gt;date20200102&lt;/th&gt;
      &lt;th&gt;date20200103&lt;/th&gt;
      &lt;th&gt;date20200104&lt;/th&gt;
      &lt;th&gt;date20200105&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以看到現在每一個日期變成了一個column，沒有辦法輕易的指定橫軸、縱軸就將圖畫出來，不過我們可以稍微調整一下資料，使之變成像”&lt;a href=&quot;#橫軸是其中一個欄位&quot;&gt;橫軸是其中一個欄位&lt;/a&gt;“那樣好指定的長相，整個程式碼長得像底下這樣。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rownames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt_t_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id.vars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;melt_t_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geom_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先，我們得要將資料透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t()&lt;/code&gt;轉置一下，把日期變成row，於此同時把column name設成A、B，也就是程式碼中的第一行，其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data[,2ncol(data)]&lt;/code&gt;的意思是選取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;裡面的第二個column至最後一個column(R是1 base的語言)，也就是從&lt;strong&gt;date20200101&lt;/strong&gt;選到&lt;strong&gt;date20200105&lt;/strong&gt;，同理，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data[,1]&lt;/code&gt;就是選取&lt;strong&gt;type&lt;/strong&gt;這個column。&lt;/p&gt;

&lt;p&gt;在經過第一行的轉換以後，原先的dataframe會變成底下的樣子。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200101&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200102&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200103&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200104&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200105&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;雖然變得比較像可以直接指定了，但目前還沒有辦法直接把所有的日期都選取起來，也就是日期還不是一個column，不過我們可以透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t_data[&quot;date&quot;] = rownames(t_data)&lt;/code&gt;來新增一個column &lt;strong&gt;date&lt;/strong&gt;，其中每個row都是日期。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200101&lt;/td&gt;
      &lt;td&gt;0.3&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;date20200101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200102&lt;/td&gt;
      &lt;td&gt;0.4&lt;/td&gt;
      &lt;td&gt;0.8&lt;/td&gt;
      &lt;td&gt;date20200102&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200103&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;date20200103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date20200104&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;date20200104&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date20200105&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;0.7&lt;/td&gt;
      &lt;td&gt;date20200105&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;至此我們成功讓我們的資料長得像”&lt;a href=&quot;#橫軸是其中一個欄位&quot;&gt;橫軸是其中一個欄位&lt;/a&gt;“中的資料那樣，接著一樣透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;melt()&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ggplot()&lt;/code&gt;便能將圖畫出來了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;line-transpose.png&quot; alt=&quot;Line Transpose&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;文氏圖&quot;&gt;文氏圖&lt;/h2&gt;

&lt;p&gt;文氏圖很適合用來觀察集合的關係，而R也有套件能夠幫助你很容易地畫出簡單的文氏圖。&lt;/p&gt;

&lt;h3 id=&quot;安裝套件&quot;&gt;安裝套件&lt;/h3&gt;

&lt;p&gt;在R裡面可以幫忙畫文氏圖的套件叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VennDiagram&lt;/code&gt;，可以使用底下的指令安裝並引入。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VennDiagram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VennDiagram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用venndiagram畫出文氏圖&quot;&gt;使用VennDiagram畫出文氏圖&lt;/h3&gt;

&lt;p&gt;假如我們今天想要觀察兩個集合&lt;strong&gt;A&lt;/strong&gt;、&lt;strong&gt;B&lt;/strong&gt;的關係，我們也已經知道兩者的大小和交集如下。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;Intersection&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;使用的方式很簡單，只要把數字填進去就能夠將圖畫出來了。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;grid.newpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw.pairwise.venn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cross.area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;venn-raw.png&quot; alt=&quot;Venn Raw&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;加上百分比和修改字體大小&quot;&gt;加上百分比和修改字體大小&lt;/h4&gt;

&lt;p&gt;如果想要在圖裡面加上百分比的話，只需要多加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print.mode=c(&quot;raw&quot;, &quot;percent&quot;)&lt;/code&gt;就行。&lt;/p&gt;

&lt;p&gt;至於字體的大小，可以透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cex&lt;/code&gt;調整數字字體大小、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat.cex&lt;/code&gt;調整類別的字體大小。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;grid.newpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw.pairwise.venn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cross.area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print.mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;percent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat.cex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;venn-percent.png&quot; alt=&quot;Venn Percent&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;將數字加上逗號&quot;&gt;將數字加上逗號&lt;/h4&gt;

&lt;p&gt;如果今天的數字很大的話，我們通常會希望在數字裡面加上逗號，方便我們去看這個數字是幾百萬還是幾千萬，假如我們的資料是底下這樣。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;Intersection&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;12345678&lt;/td&gt;
      &lt;td&gt;87654321&lt;/td&gt;
      &lt;td&gt;5647382&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;這邊的做法比較tricky一些，因為VennDiagram並沒有辦法直接多加一個參數就能將逗號塞進去，我們需要自己手動放入。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw.pairwise.venn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12345678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;87654321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cross.area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5647382&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print.mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;percent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面的指令跑完以後可以透過&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View(plot)&lt;/code&gt;看到其&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[5]]&lt;/code&gt;到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[7]]&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;裡面寫的資訊是會顯示在圖裡的字串。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;plot-view.png&quot; alt=&quot;View Plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是故我們只需要去修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;裡面的值，把逗號塞進去再畫出來就行了。&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw.pairwise.venn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12345678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;87654321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cross.area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5647382&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print.mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;percent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;as.numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big.mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientific&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid.newpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid.draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面的程式碼中，我們寫了一個for迴圈去改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[5]]&lt;/code&gt;到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[7]]&lt;/code&gt;的值，我們將&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;拿出來並以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;切成數字部分和百分比的部分，接著把數字部分塞逗號進去以後再與百分比部分接起來，最後再將圖畫出來，就達成我們想要的效果了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;venn-comma.png&quot; alt=&quot;Venn Comma&quot; /&gt;&lt;/p&gt;</content><author><name>Your Name</name></author><category term="Tool" /><summary type="html">在以前有聽聞說R語言很適合用來畫圖，方便人們來觀察資料的特性，這篇粗淺的紀錄一下我用過的一些作圖function。</summary></entry></feed>