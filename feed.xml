<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/" rel="alternate" type="text/html" /><updated>2023-03-06T01:44:45+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/feed.xml</id><title type="html">wjohn1483.github.io</title><subtitle></subtitle><author><name>Your Name</name></author><entry><title type="html">Google Apps Script介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/23/google-apps-script/" rel="alternate" type="text/html" title="Google Apps Script介紹" /><published>2023-02-23T00:00:00+00:00</published><updated>2023-02-23T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/23/google-apps-script</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/23/google-apps-script/"><![CDATA[<p>在<a href="https://wjohn1483.github.io/2021/06/05/display-html-in-google-sheet/">先前的文章</a>裡面，使用了Google apps script來在Google sheet裡面顯示html，而Google apps script還可以做到更多的事情，這篇文章簡單介紹一下Google apps script是什麼，並如何使用它操作Google calendar。</p>

<!--more-->

<h2 id="google-apps-script">Google Apps Script</h2>

<p><a href="https://www.google.com/script/start/">Google Apps Script（GAS）</a>是一個基於javascript的開發平台，可以在其中方便地跟Google Workspace的服務像是Gmail、Google Calendar、Google Maps等做整合，讓你可以對這些服務做更細緻的操作或是讓多個服務做連動。舉例來說，可以透過Google Sheet整理要一併寄出的收件者和內容，透過GAS來串連Gmail做寄出，又或者可以用GAS來設定今天這個Google Form收到多少回覆後就自動停止等。</p>

<p>除了寫給讓自己的生活更便利以外，GAS還可以部署成web api或者是extension來讓其他人打、使用，是個簡單卻又強大的功能，以下會帶一個<a href="https://developers.google.com/apps-script/samples/automations/vacation-calendar">同步group mail底下個人行事曆到共享行事曆的例子</a>來看看GAS要怎麼寫，如果想看其他更多的應用除了可以看<a href="https://developers.google.com/apps-script/samples">官方文件的範例</a>以外，強烈建議可以看<a href="https://ithelp.ithome.com.tw/articles/10275214">這篇文章</a>，裡面詳述地記載了一些常用到的scenario，並有實際的程式碼來一步一步帶領你建立屬於你的GAS。</p>

<h2 id="同步行事曆">同步行事曆</h2>

<p>在一個團隊裡面有時會有不定人數的人請假，為了能更方便地一眼看到誰請假，避免打擾到休假的人，我們時常會建立一個共享的團隊行事曆，讓大家去填上哪天休假，但這時請假的人就會需要在個人的行事曆上建立請假的事件，並額外在共享的行事曆上也建立相同的事件。</p>

<p>這種類型的事情，就很適合透過GAS來達成，我們可以寫一個GAS去週期性地掃團隊裡面的每個人的行事曆，把有特殊關鍵字的事件引入到共享的行事曆中，就可以節省團隊成員手動建立事件到共享行事曆的時間了。</p>

<p>詳細的程式碼和說明可以參考<a href="https://developers.google.com/apps-script/samples/automations/vacation-calendar">官方文件</a>，底下會稍微解釋一下這件事情是如何被達成的。</p>

<h3 id="程式概覽">程式概覽</h3>

<p>在跟著<a href="https://developers.google.com/apps-script/samples/automations/vacation-calendar">官方文件</a>建立新的行事曆以後，有個按鈕可以打開範例的專案，建立副本以後就能做修改了，理論上照著說明把變數換成你想要的並執行就能達到上述的功能了。</p>

<p>在專案裡面分成兩大塊，在Services裡面可以看到有個<code class="language-plaintext highlighter-rouge">Calendar</code>的service，表示我們在<code class="language-plaintext highlighter-rouge">Code.gs</code>裡面會需要用到calendar的API，而<code class="language-plaintext highlighter-rouge">Code.gs</code>是我們主要實現邏輯的地方。</p>

<p>在<code class="language-plaintext highlighter-rouge">Code.gs</code>裡面有底下幾個function：</p>

<ul>
  <li>
    <p>setup：設定trigger來去定期地執行sync</p>
  </li>
  <li>
    <p>sync：程式的進入點，去逐一掃描團隊個人行事曆裡面的事件是不是有包含到定義的關鍵字，如果有，就引入到共享行事曆中</p>
  </li>
  <li>
    <p>importEvent：引入event到共享行事曆中</p>
  </li>
  <li>
    <p>findEvents：尋找哪些event該被引入到共享行事曆中</p>
  </li>
  <li>
    <p>shoudImportEvent：判斷該不該引入event</p>
  </li>
  <li>
    <p>formatDateAsRFC3339：把日期轉成特定格式</p>
  </li>
</ul>

<p>其實裡面的邏輯並不複雜，註解也寫得很詳細，可以很快速地看懂每個function想要做的事情，而裡面所使用的物件method可以在<a href="https://developers.google.com/apps-script/reference/calendar">Apps Script的文件</a>當中找到每個method的定義、傳入值和回傳值。</p>

<h3 id="測試程式">測試程式</h3>

<p><img src="./debug.png" alt="Debug" /></p>

<p>在寫好了想要的邏輯以後，可以在畫面上方的menu bar裡面選擇想要測試的function並點擊<code class="language-plaintext highlighter-rouge">Debug</code>的按鈕來測試想要的功能有沒有被實現，如果在上面找不到寫好的function，可能是因為還沒有儲存專案的關係。</p>

<p>如果想要印出debug訊息，除了使用<code class="language-plaintext highlighter-rouge">Debug</code>按鈕提供的sidebar以外，可以使用<code class="language-plaintext highlighter-rouge">console.log()</code>來把訊息寫在console中。</p>

<h3 id="定期執行程式">定期執行程式</h3>

<p>在<code class="language-plaintext highlighter-rouge">setup()</code>裡面會透過API建立一個每30分鐘執行一次的排程作業，我們也可以透過左邊的Triggers手動建立一個trigger來定期執行GAS，而GAS會在GCP的default專案裡面被執行，也就是使用你個人的資源來運行，不過Google有提供<a href="https://developers.google.com/apps-script/guides/services/quotas">免費的quota</a>來做使用，而每次執行的log都可以在左邊Executions的tab裡面找到。</p>

<p>如果想要把專案部署成API、使用Service API的次數超過免費額度，就會需要把這份GAS改放到其他專案裡面，根據用量來付費。</p>

<h2 id="結論">結論</h2>

<p>GAS是個方便統整Google服務的平台，除了<a href="https://ithelp.ithome.com.tw/articles/10275214">上述文章</a>提供的使用情境外，還可以根據自身碰到的情況來做擴充，藉由研讀Google服務們所提供的API來達到你的需求。</p>

<p>像是在上面同步行事曆的GAS裡面，如果有人後來決定不請假的話，在程式碼裡面是不會判斷這件事並把共享行事曆裡面的事件刪除掉的，這時就可以參考Calendar的API來自行撰寫刪除事件的function。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Delete all events in the calendar with id TEAM_CALENDAR_ID
 */</span>
<span class="kd">function</span> <span class="nf">deleteAllEvents</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">calendar</span> <span class="o">=</span> <span class="nx">CalendarApp</span><span class="p">.</span><span class="nf">getCalendarById</span><span class="p">(</span><span class="nx">TEAM_CALENDAR_ID</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Delete all events in calendar "</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">calendar</span><span class="p">.</span><span class="nf">getName</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">"</span><span class="se">\n</span><span class="s1">from "</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">start</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">"</span><span class="se">\n</span><span class="s1">to "</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">end</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">events</span> <span class="o">=</span> <span class="nx">calendar</span><span class="p">.</span><span class="nf">getEvents</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">);</span>
  <span class="nx">events</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Deleting: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nf">getTitle</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">starting from </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nf">getStartTime</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">end at </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nf">getEndTime</span><span class="p">());</span>
    <span class="nx">event</span><span class="p">.</span><span class="nf">deleteEvent</span><span class="p">();</span>
    <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
  <span class="p">});</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Deleted </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">count</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> events</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>上面的function會把共享行事曆裡面特定日期內的所有事件都刪除，我們就能用這個簡單的方式在import事件之前把事件都清空，再把event引入到行事曆中來達到event同步刪除的功能。</p>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[在先前的文章裡面，使用了Google apps script來在Google sheet裡面顯示html，而Google apps script還可以做到更多的事情，這篇文章簡單介紹一下Google apps script是什麼，並如何使用它操作Google calendar。]]></summary></entry><entry><title type="html">xsv使用介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/15/xsv/" rel="alternate" type="text/html" title="xsv使用介紹" /><published>2023-02-15T00:00:00+00:00</published><updated>2023-02-15T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/15/xsv</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/15/xsv/"><![CDATA[<p>這篇文章簡單紀錄xsv，一個處理csv檔案的command line工具的使用範例。</p>

<!--more-->

<p><a href="https://github.com/BurntSushi/xsv">xsv</a>是一個command line工具，專門用來處理csv檔案，方便使用者在處理資料或是觀察資料的時候可以迅速地得到想要的結果。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage:
    xsv &lt;command&gt; [&lt;args&gt;...]
    xsv [options]

Options:
    --list        List all commands available.
    -h, --help    Display this message
    &lt;command&gt; -h  Display the command help message
    --version     Print version info and exit

Commands:
    cat         Concatenate by row or column
    count       Count records
    fixlengths  Makes all records have same length
    flatten     Show one field per line
    fmt         Format CSV output (change field delimiter)
    frequency   Show frequency tables
    headers     Show header names
    help        Show this usage message.
    index       Create CSV index for faster access
    input       Read CSV data with special quoting rules
    join        Join CSV files
    sample      Randomly sample CSV data
    search      Search CSV data with regexes
    select      Select columns from CSV
    slice       Slice records from CSV
    sort        Sort CSV data
    split       Split CSV data into many files
    stats       Compute basic statistics
    table       Align CSV data into columns
</code></pre></div></div>

<p>上面是xsv的usage，底下會走過一遍在<a href="https://github.com/BurntSushi/xsv/blob/master/README.md">xsv的README.md</a>裡面的範例，會更清楚各個指令的使用情況。</p>

<h2 id="取得範例資料">取得範例資料</h2>

<p>在開始執行範例之前，會需要先準備一個csv檔案來作為指令的作用對象，在README.md裡面提供了一個範例資料，記載了世界上每個城市的人口。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LO</span> https://burntsushi.net/stuff/worldcitiespop.csv
</code></pre></div></div>

<h2 id="安裝xsv">安裝xsv</h2>

<p>安裝xsv的方法可以參照<a href="https://github.com/BurntSushi/xsv#installation">官方文件裡面的說明</a>，如果是mac的話可以直接使用底下的指令。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>xsv
</code></pre></div></div>

<p>如果是Windows或是Linux，xsv也有提供<a href="https://github.com/BurntSushi/xsv/releases/">binary檔在GitHub上可以下載</a>，下面的指令是以Linux為範例。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/BurntSushi/xsv/releases/download/0.13.0/xsv-0.13.0-x86_64-unknown-linux-musl.tar.gz
<span class="nb">tar </span>zxvf xsv-0.13.0-x86_64-unknown-linux-musl.tar.gz
<span class="nb">sudo mv </span>xsv /usr/local/bin
</code></pre></div></div>

<h2 id="查看csv的基本資料">查看csv的基本資料</h2>

<h3 id="csv裡面有哪些欄位">csv裡面有哪些欄位</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv headers worldcitiespop.csv
1   Country
2   City
3   AccentCity
4   Region
5   Population
6   Latitude
7   Longitude
</code></pre></div></div>

<h3 id="各個欄位的統計數據">各個欄位的統計數據</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv stats <span class="nt">--everything</span> worldcitiespop.csv | xsv table
field       <span class="nb">type     sum                 </span>min            max            min_length  max_length  mean                stddev              median      mode         cardinality
Country     Unicode                      ad             zw             2           2                                                               cn           234
City        Unicode                       bab el ahmar  Þykkvibaer     1           91                                                              san jose     2351892
AccentCity  Unicode                       Bâb el Ahmar  ïn Bou Chella  1           91                                                              San Antonio  2375760
Region      Unicode                      00             Z9             0           2                                                   13          04           397
Population  Integer  2289584999          7              31480498       0           8           47719.570633597126  302885.5592040396   10779                    28754
Latitude    Float    86294096.37312101   <span class="nt">-54</span>.933333     82.483333      1           12          27.188165808468785  21.95261384912504   32.4972221  51.15        1038349
Longitude   Float    117718483.57958724  <span class="nt">-179</span>.9833333   180            1           14          37.08885989656418   63.223010459241635  35.28       23.8         1167162
</code></pre></div></div>

<p>在指令裡面的<code class="language-plaintext highlighter-rouge">--everything</code>是把所有可以得到的統計數字都列出來，在這個例子裡面如果不下<code class="language-plaintext highlighter-rouge">--everything</code>的話，欄位就會少了median、mode和cardinality，<code class="language-plaintext highlighter-rouge">xsv stats</code>最後產生出來的會是csv的格式，為了在terminal上面比較好觀察，所以把結果pipe到<code class="language-plaintext highlighter-rouge">xsv table</code>裡面讓它把結果排整齊。</p>

<h3 id="csv有多少筆資料">csv有多少筆資料</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv count worldcitiespop.csv
3173958
</code></pre></div></div>

<h2 id="查看csv的內容">查看csv的內容</h2>

<h3 id="查看csv的特定列數">查看csv的特定列數</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv slice worldcitiespop.csv <span class="nt">-s</span> 0 <span class="nt">-e</span> 5 | xsv table
Country  City        AccentCity  Region  Population  Latitude    Longitude
ad       aixas       Aixàs       06                  42.4833333  1.4666667
ad       aixirivali  Aixirivali  06                  42.4666667  1.5
ad       aixirivall  Aixirivall  06                  42.4666667  1.5
ad       aixirvall   Aixirvall   06                  42.4666667  1.5
ad       aixovall    Aixovall    06                  42.4666667  1.4833333
</code></pre></div></div>

<p>在指令裡面的<code class="language-plaintext highlighter-rouge">-s/--start</code>是開始的列數，這邊index是0-based的，所以第一筆資料的index是0，而<code class="language-plaintext highlighter-rouge">-e/--end</code>是結束的列數，所給予的index<strong>不會</strong>包含在輸出裡面，可以想成會輸出的資料列數是<code class="language-plaintext highlighter-rouge">[start, end)</code>。</p>

<p>在<code class="language-plaintext highlighter-rouge">xsv slice</code>裡面還有提供<code class="language-plaintext highlighter-rouge">-l/--len</code>的argument來讓使用者決定要輸出多少列。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv slice worldcitiespop.csv <span class="nt">-s</span> 0 <span class="nt">-l</span> 6 | xsv table
Country  City        AccentCity  Region  Population  Latitude    Longitude
ad       aixas       Aixàs       06                  42.4833333  1.4666667
ad       aixirivali  Aixirivali  06                  42.4666667  1.5
ad       aixirivall  Aixirivall  06                  42.4666667  1.5
ad       aixirvall   Aixirvall   06                  42.4666667  1.5
ad       aixovall    Aixovall    06                  42.4666667  1.4833333
ad       andorra     Andorra     07                  42.5        1.5166667
</code></pre></div></div>

<p>如果只是想看特定某一列的話，可以用<code class="language-plaintext highlighter-rouge">-i/--index</code>來看。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv slice worldcitiespop.csv <span class="nt">-i</span> 1 | xsv table
Country  City        AccentCity  Region  Population  Latitude    Longitude
ad       aixirivali  Aixirivali  06                  42.4666667  1.5
</code></pre></div></div>

<p>如果csv裡面有很多column的話，可以把指令後面的table換成flatten，改用直的方式印出來。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv slice worldcitiespop.csv <span class="nt">-s</span> 0 <span class="nt">-l</span> 2 | xsv flatten
Country     ad
City        aixas
AccentCity  Aixàs
Region      06
Population
Latitude    42.4833333
Longitude   1.4666667
<span class="c">#</span>
Country     ad
City        aixirivali
AccentCity  Aixirivali
Region      06
Population
Latitude    42.4666667
Longitude   1.5
</code></pre></div></div>

<h3 id="查看特定column">查看特定column</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv <span class="k">select </span>Country,AccentCity,Population worldcitiespop.csv | xsv sample 10 | xsv table
Country  AccentCity            Population
us       Thomas Crossing
lk       Egodagoda
ir       Sarbandan
rs       Malo Lukare
lv       Polumyza Mazindritsa
ru       Sovkhoznyy            3916
ne       Balidey
mk       <span class="o">((</span> Kisela Voda <span class="o">))</span>
br       Japuim
ir       Qal<span class="sb">`</span>ehgah-e Khalifeh
</code></pre></div></div>

<p>上面指令的<code class="language-plaintext highlighter-rouge">xsv select</code>後面接的是column的名稱，這邊也可以用index來替代，不過這邊就是1-based的計數方式，所以在上面我們需要把<code class="language-plaintext highlighter-rouge">Country,AccentCity,Population</code>替換成<code class="language-plaintext highlighter-rouge">1,3,5</code>來得到一樣的column。</p>

<p>如果多個column有相同的名稱可以在後面用中括號來表示這個第幾個重複的column，像是<code class="language-plaintext highlighter-rouge">xsv select 'Foo[2]'</code>就是拿第三個叫<code class="language-plaintext highlighter-rouge">Foo</code>的column，而如果要抓取某個範圍內的column，可以用<code class="language-plaintext highlighter-rouge">-</code>來選取中間所有的column，像是<code class="language-plaintext highlighter-rouge">Country-Population</code>或<code class="language-plaintext highlighter-rouge">1-5</code>，更多的操作方法可以看<code class="language-plaintext highlighter-rouge">xsv select -h</code>裡面的說明。</p>

<h3 id="每個value的出現次數">每個value的出現次數</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv frequency worldcitiespop.csv <span class="nt">--limit</span> 3 | xsv table
field       value        count
Country     cn           238985
Country     ru           215938
Country     <span class="nb">id           </span>176546
City        san jose     328
City        san antonio  320
City        santa rosa   296
AccentCity  San Antonio  317
AccentCity  Santa Rosa   296
AccentCity  Santa Cruz   281
Region      04           159916
Region      02           142158
Region      07           126867
Population  <span class="o">(</span>NULL<span class="o">)</span>       3125978
Population  2310         12
Population  2230         11
Latitude    51.15        777
Latitude    51.083333    772
Latitude    51.116667    769
Longitude   23.8         484
Longitude   23.2         477
Longitude   23.05        476
</code></pre></div></div>

<p>這邊<code class="language-plaintext highlighter-rouge">xsv frequency</code>會去計算每個column裡面的每一個value在這個csv裡面出現了幾次，而<code class="language-plaintext highlighter-rouge">--limit</code>會限制取出現次數最多的前N名，如果想看頻率由小到大的排序，可以用<code class="language-plaintext highlighter-rouge">-a/--asc</code>的option。</p>

<h3 id="搜尋欄位的值">搜尋欄位的值</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv search <span class="nt">-s</span> Population <span class="s1">'[0-9]'</span> worldcitiespop.csv | xsv <span class="k">select </span>Country,AccentCity,Population | xsv sample 10 | xsv table
Country  AccentCity  Population
cz       Sumperk     29604
co       Vianí       1586
ph       La Curva    3359
fr       Eaubonne    23739
<span class="k">in       </span>Kamareddi   71049
ru       Ust-Kulom   5205
us       Brent       22735
ph       Lupao       11000
ro       Caraula     2628
ph       Bacnar      4606
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-s/--select</code>可以指定要搜尋的是哪一個column，而後面搜尋的pattern是regular expression，如果想要排除有比對到的結果，可以用<code class="language-plaintext highlighter-rouge">-v/--invert-match</code>，<code class="language-plaintext highlighter-rouge">xsv search</code>會把所有有比對到的列都印出來變成csv檔，所以如果要只顯示部分的欄位就需要再使用<code class="language-plaintext highlighter-rouge">xsv select</code>或是<code class="language-plaintext highlighter-rouge">xsv slice</code>做處理。</p>

<h2 id="join兩個csv">join兩個csv</h2>

<p>在上面的例子裡面，如果我們想要知道每個Country的縮寫實際代表的國家是哪個的話，可以透過查表的方式來得到，底下的指令會下載一個csv檔，裡面記載著國家縮寫的全稱是什麼。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LO</span> https://gist.githubusercontent.com/anonymous/063cb470e56e64e98cf1/raw/98e2589b801f6ca3ff900b01a87fbb7452eb35c7/countrynames.csv
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv headers countrynames.csv
1   Abbrev
2   Country
</code></pre></div></div>

<p>我們也可以使用join的方式來直接把所有的縮寫都轉成全稱。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv <span class="nb">join</span> <span class="nt">--no-case</span> Abbrev countrynames.csv Country worldcitiespop.csv | xsv sample 10 | xsv table
Abbrev  Country     Country  City             AccentCity       Region  Population  Latitude     Longitude
CO      Colombia    co       santa marta      Santa Marta      28                  3.883889     <span class="nt">-75</span>.102222
LV      Latvia      lv       kozes            Kozes            10                  56.2         25.7
TN      Tunisia     tn       bir bou rekba    Bir Bou Rekba    19                  36.434824    10.565897
LA      Laos        la       ban poung        Ban Poung        22                  19.928056    100.608611
GE      Georgia     ge       zakvi            Zakvi            06                  41.5063889   43.4997222
MZ      Mozambique  mz       gube             Gubé             04                  <span class="nt">-26</span>.2833333  32.5666667
PE      Peru        pe       cruz de callana  Cruz de Callana  11                  <span class="nt">-13</span>.75       <span class="nt">-75</span>.9333333
MZ      Mozambique  mz       maguezane        Maguezane        03                  <span class="nt">-21</span>.5166667  34.6375
TH      Thailand    th       ban tang pra     Ban Tang Pra     35                  14.678472    100.351278
LA      Laos        la       ban xiangkheng   Ban Xiangkheng   16                  21.333333    100.883333
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">xsv join</code>裡面，需要先把想要join的key擺在前面，後面再接csv檔。除了上面的inner join以外，xsv還有支援left join、right join等，可以看<code class="language-plaintext highlighter-rouge">xsv join -h</code>裡面的說明。</p>

<p>在上面的結果裡面，如果我們只想要保留國家的全稱就好，想把join的key都拿掉的話，可以再過一個<code class="language-plaintext highlighter-rouge">xsv select '!Abbrev,Country[1]'</code>，把除了Abbrev和第二個Country以外的全部欄位都選出來。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv <span class="nb">join</span> <span class="nt">--no-case</span> Abbrev countrynames.csv Country worldcitiespop.csv | xsv <span class="k">select</span> <span class="s1">'!Abbrev,Country[1]'</span> | xsv sample 10 | xsv table
Country                          City           AccentCity     Region  Population  Latitude     Longitude
Peru                             cachisama      Cachisama      05                  <span class="nt">-13</span>.1166667  <span class="nt">-74</span>.3
Bosnia and Herzegovina | Bosnia  gecet          Gecet          01                  44.5666667   16.1005556
China                            caihuaqiao     Caihuaqiao     07                  27.035278    119.777222
Pakistan                         kothung        Kothung        07                  35.384052    75.74772
Pakistan                         dhok waraich   Dhok Waraich   04                  33.727099    72.242949
Russian Federation | Russia      yasenok        Yasenok        10                  53.218388    32.851209
Philippines                      padaraonan     Padaraonan     J3                  10.4919      122.4906
Indonesia                        gunungaseupan  Gunungaseupan  30                  <span class="nt">-7</span>.039722    107.505278
Colombia                         dificil        Dificil        38                  9.849747     <span class="nt">-74</span>.236267
Ukraine                          lesnichevka    Lesnichëvka    23                  48.613614    28.180124
</code></pre></div></div>

<h2 id="加速xsv的計算">加速xsv的計算</h2>

<p>xsv支援先對csv檔做index，來讓xsv的其他操作像是<code class="language-plaintext highlighter-rouge">stats</code>、<code class="language-plaintext highlighter-rouge">slice</code>等可以變得更快。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; % xsv index worldcitiespop.csv
</code></pre></div></div>

<p>執行完上面的指令以後會產生一個<strong>wordcitiespop.csv.idx</strong>的檔案，接下來在執行其他操作的時候就會自動加速了，不過如果原本的檔案內容有被更動過的話，會需要再重新製作一個index檔。</p>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[這篇文章簡單紀錄xsv，一個處理csv檔案的command line工具的使用範例。]]></summary></entry><entry><title type="html">KGAT: Knowledge Graph Attention Network for Recommendation</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/02/kgat/" rel="alternate" type="text/html" title="KGAT: Knowledge Graph Attention Network for Recommendation" /><published>2023-02-02T00:00:00+00:00</published><updated>2023-02-02T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/02/kgat</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2023/02/02/kgat/"><![CDATA[<p>這篇文章紀錄一下看了<a href="https://arxiv.org/pdf/1905.07854.pdf">KGAT: Knowledge Graph Attention Network for Recommendation</a>的筆記。</p>

<!--more-->

<p>在過去的推薦系統當中，蠻常使用collaborative filtering（CF）來產生推薦，藉由觀察使用者和商品的互動行為，來找出目標使用者跟哪些現有的使用者相似，用現有使用者有互動過的商品來推薦給目標使用者。</p>

<p>然而，在collaborative filtering當中，比較少著墨於使用者本身的特性以及商品之間的關聯，主要只使用使用者對商品的行為來當作輸入，而這篇paper嘗試引入了knowledge graph進來，藉此補足collaborative filtering不足的部分。</p>

<h2 id="task-formulation">Task Formulation</h2>

<p>這邊先介紹一下在這篇paper裡面所使用到的graph，主要是由兩個bipartite組成。</p>

<p><img src="./collaborative_knowledge_graph.png" alt="Collaborative knowledge graph" /></p>

<p>上半部的Users、Items是collaborative filtering的部分，由user和item組成，其中兩者的關係$r_1$是指user看過item的意思，舉例來說user $u_1$看過item $i_1$，就會在上圖有個$u_1$的node，並有一個箭頭$r_1$指向item $i_1$的node。</p>

<p>下半部的Items、Entities是knowledge graph的部分，每一個$e_n$表示的是item的特性，而item和entity之間可能有很多的關係像是電影種類、導演、演員等。</p>

<p>作者將這個由兩個bipartite組成的graph稱之為<strong>Collaborative Knowledge Graph</strong>，可以簡單想成是我們把$u_1$看過$i_1$做成$(u_1, r_1, i_1)$這樣的triplet也放進knowledge graph裡面。</p>

<h2 id="method">Method</h2>

<p>上面的部分主要是模型輸入的部分，而下圖是整個模型的架構圖。</p>

<p><img src="./model_overview.png" alt="Model overview" /></p>

<h3 id="embedding-layer">Embedding Layer</h3>

<p>在這邊我們會給每一個user、item、entity和relation一個embedding，不過因為我們已經轉換成了knowledge graph的形式，成為了$(head, relation, tail)$的triplet們，所以在底下便會用$\mathbf{e}_h, \mathbf{e}_t \in \mathbb{R}^d$來代表head和tail的embedding，用$\mathbf{e}_r\in\mathbb{R}^k$來代表relation的embedding。</p>

<p>在knowledge graph裡面我們會需要一個來衡量這個triplet目前學得怎麼樣的分數，而這篇paper的定義如下</p>

\[g(h, r, t)=\left \| \mathbf{W}_r\mathbf{e}_h+\mathbf{e}_r-\mathbf{W}_r\mathbf{e}_t\right \|_2^2\]

<p>在上面的$\mathbf{W}_r\in\mathbb{R}^{k\times d}$是一個transformation matrix，幫忙把head和tail的embedding轉換到relation的空間，並直接用head和relation向量相加的位置跟tail的位置差異來為triplet打分數，一個越小的$g(h, r, t)$是越好的。</p>

<p>而要訓練的loss function便是希望有存在在graph裡面的triplet的$g(h, r, t)$要比隨機抽樣的tail $t’$的$g(h, r, t’)$還要來得小。</p>

\[\mathcal{L}_{KG}=\sum\limits_{(h, r, t, t') \in \tau}-\ln\sigma\left( g(h, r, t')-g(h, r, t) \right)\\ \tau=\{ (h, r, t, t')|(h, r, t)\in\mathcal{G}, (h, r, t')\notin\mathcal{G}\}\]

<p>上面算式中的$\sigma$是sigmoid function。</p>

<h3 id="attentive-embedding-propagation-layers">Attentive Embedding Propagation Layers</h3>

<h4 id="information-propagation">Information Propagation</h4>

<p>在這篇paper裡面，embedding除了被上面knowledge graph的gradient更新以外，這裡還會根據鄰居的embedding來影響本身的embedding。</p>

<p>假如現在有一個entity $h$，它的鄰居就是與$h$相鄰的所有node，而我們把這些鄰居按照重要性weighted sum成一個單一的embedding $\mathbf{e}_{\mathcal{N}_h}$。</p>

\[\mathbf{e}_{\mathcal{N}_h}=\sum\limits_{(h, r, t)\in\mathcal{N}_h}\pi(h,r,t)\mathbf{e}_t\\ \mathcal{N}_h = \{(h, r, t) \vert (h, r, t) \in \mathcal{G} \}\]

<h4 id="knowledge-aware-attention">Knowledge-aware Attention</h4>

<p>在式$(3)$裡面的$\pi(h,r,t)$所定義每個鄰居的重要程度是由底下的式子定義出來的</p>

\[\pi(h,r,t)=(\mathbf{W}_r\mathbf{e}_t)^\top\tanh\left((\mathbf{W}_r\mathbf{e}_h+\mathbf{e}_r)\right)\]

<p>在這邊我們把entity和它的鄰居透過transformation matrix轉換到relation的空間以後，透過dot product來算出跟entity $h$的相關性來表示鄰居的重要程度，接著再做normalize。</p>

\[\pi(h, r, t)=\frac{\exp(\pi(h,r,t))}{\sum_{(h,r',t')\in\mathcal{N}_h}\exp(\pi(h,r',t'))}\]

<h4 id="information-aggregation">Information Aggregation</h4>

<p>在有了鄰居的embedding $\mathbf{e}_{\mathcal{N}_h}$以後，這篇paper提出了三種function來更新原本的entity embedding $\mathbf{e}_h$。</p>

<ul>
  <li>GCN Aggregator</li>
</ul>

\[f_{GCN}=\mathrm{LeakyReLU}\left( \mathbf{W}(\mathbf{e}_h+\mathbf{e}_{\mathcal{N}_h}) \right)\]

<ul>
  <li>GraphSage Aggregator</li>
</ul>

\[f_{GraphSage}=\mathrm{LeakyReLU}\left( \mathbf{W}(\mathbf{e}_h\|\mathbf{e}_{\mathcal{N}_h})\right)\]

<ul>
  <li>Bi-Interaction Aggregator</li>
</ul>

\[f_{Bi-Interaction}=\mathrm{LeakyReLU}\left(\mathbf{W}_1(\mathbf{e}_h+\mathbf{e}_{\mathcal{N}_h})\right)+\mathrm{LeakyReLU}\left(\mathbf{W}_2(\mathbf{e}_h\odot\mathbf{e}_{\mathcal{N}_h})\right)\]

<p>上面的$\mathbf{W}_1,\mathbf{W}_2\in\mathbb{R}^{d’\times d}$是可被訓練的參數，而$\odot$是element-wise product。</p>

<h4 id="high-order-propagation">High-order Propagation</h4>

<p>在上面我們定義了如何把entity $h$的鄰居的資訊整合起來變成一個embedding，也定義了一些function來更新entity $h$的embedding，而這樣的步驟可以重複很多次來得到多個embedding表示距離從近到遠的資訊總和，這邊假設我們重複$l$次，每次entity $h$的embedding為</p>

\[\mathbf{e}^{(l)}_h=f\left(\mathbf{e}^{(l-1)}_h,\mathbf{e}^{(l-1)}_{\mathcal{N}_h}\right)\]

<p>而鄰居的embedding為</p>

\[\mathbf{e}^{(l-1)}_{\mathcal{N}_h}=\sum\limits_{(h,r,t)\in\mathcal{N}_h}\pi(h,r,t)\mathbf{e}^{(l-1)}_t\]

<h3 id="model-prediction">Model Prediction</h3>

<p>在經過了$l$次的擴散，也就是$L$層layer（每個step在information aggregation都可以有不同的weights）以後，每個user $u$會有$L$個embedding ${\mathbf{e}^{(1)}_u,…,\mathbf{e}^{(L)}_u}$，每個item $i$也會有$L$個embedding ${\mathbf{e}^{(1)}_i,…,\mathbf{e}^{(L)}_i}$，我們把這些embedding都concatenate起來當做是最終user和item的embedding。</p>

\[\mathbf{e}^*_u=\mathbf{e}^{(0)}_u\|...\|\mathbf{e}^{(L)}_u,\mathbf{e}^*_i=\mathbf{e}^{(0)}_i\|...\|\mathbf{e}^{(L)}_i\]

<p>而整個推薦系統的推薦便是以user和item embedding內積的結果大小來排序</p>

\[\hat y(u,i)=\mathbf{e}^{*\top}_u\mathbf{e}^*_i\]

<h3 id="optimization">Optimization</h3>

<p>在loss function的部分除了式$(2)$ knowledge graph的loss $\mathcal{L}_{KG}$以外，我們還需要把使用者跟商品互動的部分，也就是collaborative filter的loss放進去</p>

\[\mathcal{L}_{CF}=\sum\limits_{(u,i,j)\in\mathcal{O}}-\ln\sigma\left(\hat y(u,i)-\hat y(u,j)\right)\\ \mathcal{O}=\{(u,i,j)\vert(u,i)\in\mathcal{R}^+,(u,j)\in\mathcal{R}^- \}\]

<p>式$(13)$裡面的$\mathcal{O}$指的是training data，整個式子的意思是有實際互動過的使用者和商品的組合的分數要比沒有實際互動過的組合要來得高。</p>

<p>整個模型的loss function合起來的樣子如下</p>

\[\mathcal{L}_{KGAT}=\mathcal{L}_{KG}+\mathcal{L}_{CF}+\lambda\|\Theta\|^2_2\\ \Theta=\{\mathbf{E},\mathbf{W}_r,\forall l\in\mathcal{R},\mathbf{W}^{(l)}_1,\mathbf{W}^{(l)}_2,\forall l\in\{1,...,L\}\}\]

<p>其中$\Theta$是整個模型的參數，最後一項是一個$L_2$的regularization。</p>

<h2 id="experiments">Experiments</h2>

<p>作者將這個模型套用在三個dataset上，其相關的統計數值如下。</p>

<p><img src="./dataset.png" alt="Dataset statistics" /></p>

<p>模型跑出來的結果如下</p>

<p><img src="./performance.png" alt="Performance" /></p>

<p>可以看到KGAT在各個dataset上面都有不錯的表現。</p>

<h2 id="conclusion">Conclusion</h2>

<p>這篇paper在collaborative filter上又多加了knowledge graph的資訊在裡面，在各個dataset上看獲得了不錯的結果，在paper上面也有附上實作的<a href="https://github.com/xiangwang1223/knowledge_graph_attention_network">程式碼</a>讓大家試試看。</p>]]></content><author><name>Your Name</name></author><category term="Graph-Model" /><category term="Recommendation-System" /><category term="Machine-Learning" /><category term="Paper" /><summary type="html"><![CDATA[這篇文章紀錄一下看了KGAT: Knowledge Graph Attention Network for Recommendation的筆記。]]></summary></entry><entry><title type="html">自己建立Overleaf伺服器</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/24/overleaf/" rel="alternate" type="text/html" title="自己建立Overleaf伺服器" /><published>2022-11-24T00:00:00+00:00</published><updated>2022-11-24T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/24/overleaf</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/24/overleaf/"><![CDATA[<p>在過去寫paper的時候通常都是使用<a href="https://www.overleaf.com/">overleaf</a>來跟大家共同協作並把latex編譯成PDF，在偶然的機會發現到原來overleaf是有開源的版本的，底下介紹一下如何自行建立overleaf的伺服器。</p>

<!--more-->

<h2 id="overleaf介紹">Overleaf介紹</h2>

<p>Overleaf是一個線上latex的共同編輯器，提供了一個平台可以讓大家在上面共同編輯latex的文件，與此同時也支援實時編譯和瀏覽結果，適合個人或者團隊在製作paper、投影片或正式文件的時候使用。</p>

<p>在<a href="https://www.overleaf.com/">overleaf</a>裡面除了有上述功能以外，還額外整合了git來做版本控制，也能直接在語句中留言，而開源版本的overleaf只有比較基本的共同編輯和實時編譯的功能。</p>

<h2 id="建置overleaf伺服器">建置Overleaf伺服器</h2>

<p>詳細的說明可以參考<a href="https://github.com/overleaf/overleaf">開源版本overleaf的GitHub</a>。</p>

<h3 id="設置overleaf">設置Overleaf</h3>

<p>在建立伺服器之前，我們需要先對它進行一些設定，像是要使用哪個port和IP，底下的指令會把overleaf相關的程式碼下載下來，並產生一些預設的設定檔。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/overleaf/toolkit.git ./overleaf-toolkit
<span class="nb">cd</span> ./overleaf-toolkit
./bin/init
</code></pre></div></div>

<p>執行完上面的指令以後，會在當前的目錄下建立<code class="language-plaintext highlighter-rouge">./config/</code>的資料夾，其中我們比較需要常去修改的是<strong>./config/overleaf.rc</strong>，在裡面就能去調整伺服器的IP和port了。預設的IP是<code class="language-plaintext highlighter-rouge">127.0.0.1</code>，如果想要讓別人可以存取的話，記得把設定改成<code class="language-plaintext highlighter-rouge">SHARELATEX_LISTEN_IP=0.0.0.0</code>或是其他想要的IP。</p>

<h3 id="透過docker建立伺服器">透過Docker建立伺服器</h3>

<p>在檔案裡面把參數設定好以後，我們就能開始建立伺服器了。overleaf有提供docker image讓大家直接使用，但會需要先安裝docker和docker-compose，docker-compose可以直接透過pip來安裝。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>docker-compose
</code></pre></div></div>

<p>接著就能執行底下的指令把伺服器起起來了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bin/up
</code></pre></div></div>

<p>如果想要把伺服器停掉，可以直接用<code class="language-plaintext highlighter-rouge">Ctrl+C</code>停掉，而停掉後想要繼續的話可以用start的指令。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bin/start
</code></pre></div></div>

<h3 id="建立admin帳號">建立Admin帳號</h3>

<p>伺服器起來以後需要先建立一個admin帳號，方便之後把其他人加進來一同協作，建立admin的方法是使用瀏覽器直接連線到<a href="http://localhost/launchpad">http://localhost/launchpad</a>，照著提示輸入email和密碼就行了，記得要將網址裡面的<code class="language-plaintext highlighter-rouge">localhost</code>改成你設定的IP和port。</p>

<h2 id="開始使用overleaf">開始使用Overleaf</h2>

<p>把伺服器開起來並有了admin帳號以後，就能開始使用overleaf來編寫簡單的latex文件了，但如果要在latex裡使用一些<code class="language-plaintext highlighter-rouge">\usepackage{}</code>的時候會發現這些package沒有被安裝，原因是因為overleaf提供的docker image只包含了最基本的套件而已，目的是不想要docker image太大以減少下載image需要的時間，如果想要用<code class="language-plaintext highlighter-rouge">\usepackage{}</code>的話，我們可以自己更新textlive。</p>

<h3 id="更新textlive">更新textlive</h3>

<p>詳細的說明可以參考<a href="https://github.com/overleaf/toolkit/blob/master/doc/ce-upgrading-texlive.md">這邊的文件</a>。</p>

<p>首先，我們需要先連進overleaf的container中</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bin/shell
</code></pre></div></div>

<p>接著就能透過<code class="language-plaintext highlighter-rouge">tlmgr</code>來安裝想要的套件了，<code class="language-plaintext highlighter-rouge">tlmgr</code>的使用方式可以下<code class="language-plaintext highlighter-rouge">tlmgr help</code>來看說明文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The following command is executed in the container</span>
<span class="c"># tlmgr install PACKAGE_YOU_WANT_TO_USE</span>
tlmgr <span class="nb">install </span>tikzlings tikzmarmots tikzducks
</code></pre></div></div>

<p>如果說不想要一個一個把需要的套件安裝進去，想一次安裝全部的話，可以使用底下的指令</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The following command is executed in the container</span>
tlmgr <span class="nb">install </span>scheme-full
</code></pre></div></div>

<p>在安裝完套件以後，理論上就能在伺服器上使用豐富的package了，但這些package在下次重新建立container的時候會消失，如果我們想要保留這個有豐富套件的container，我們可以透過<code class="language-plaintext highlighter-rouge">docker commit</code>的方式來保存。</p>

<p>首先，我們先透過<code class="language-plaintext highlighter-rouge">exit</code>或<code class="language-plaintext highlighter-rouge">Ctrl+D</code>來離開container，接著下底下的指令來儲存一個commit</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker commit sharelatex sharelatex/sharelatex:with-texlive-full
</code></pre></div></div>

<p>然後在<code class="language-plaintext highlighter-rouge">./config/</code>底下建立一個<strong>docker-compose.override.yml</strong>的檔案，在其中貼上底下的內容</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2.2'</span>
<span class="na">services</span><span class="pi">:</span>
    <span class="na">sharelatex</span><span class="pi">:</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">sharelatex/sharelatex:with-texlive-full</span>
</code></pre></div></div>

<p>最後再執行底下的指令來重新建立container。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bin/stop <span class="o">&amp;&amp;</span> bin/docker-compose <span class="nb">rm</span> <span class="nt">-f</span> sharelatex <span class="o">&amp;&amp;</span> bin/up
</code></pre></div></div>

<h3 id="開帳號與共享">開帳號與共享</h3>

<p>在開完admin帳號並創立好project以後，我們就可以直接透過瀏覽器去幫其他人開帳號並分享project給他們，開帳號的方式是點畫面右上角<code class="language-plaintext highlighter-rouge">Admin</code>底下的<code class="language-plaintext highlighter-rouge">Manage Users</code></p>

<p><img src="./manage_users.png" alt="Manage users" /></p>

<p>在下一個畫面中打上對方的email按下<code class="language-plaintext highlighter-rouge">Register</code>後，就能產生啟動連結</p>

<p><img src="./register_new_users.png" alt="Register new users" /></p>

<p>記得把啟動連結裡面的<code class="language-plaintext highlighter-rouge">localhost</code>替換成前面設定的IP和port以後傳給對方，對方就能透過連結自行設定密碼來建立帳號。</p>

<p>在project內選擇分享並打上對方的email，對方就能在project列表裡面看到邀請通知，點開就能共同編輯同一個project了。如果是新建立的使用者，會需要先創建一個空白的project以後才能跳轉到project列表中。</p>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[在過去寫paper的時候通常都是使用overleaf來跟大家共同協作並把latex編譯成PDF，在偶然的機會發現到原來overleaf是有開源的版本的，底下介紹一下如何自行建立overleaf的伺服器。]]></summary></entry><entry><title type="html">Tensorflow JS介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/19/tensorflow-js-pose-detection/" rel="alternate" type="text/html" title="Tensorflow JS介紹" /><published>2022-11-19T00:00:00+00:00</published><updated>2022-11-19T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/19/tensorflow-js-pose-detection</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/11/19/tensorflow-js-pose-detection/"><![CDATA[<p>隨著機器學習的模型可以做到越來越多的事情，人們希望可以在更多的場域來使用機器學習的模型，也因此它們也逐漸的被部署到除了電腦以外的裝置上，這篇文章主要是來簡單介紹一下tensorflow.js，把模型部署在瀏覽器上，讓更多人可以輕易地存取。</p>

<!--more-->

<p>在這篇文章裡面主要會介紹一下tensorflow.js的一些功能，並說明Google團隊先前透過tensorflow.js製作的一個應用<a href="https://experiments.withgoogle.com/move-mirror">Move Mirror</a>大概是如何被製作出來的。</p>

<h2 id="tensorflow-js">Tensorflow JS</h2>

<p><a href="https://www.tensorflow.org/js?hl=zh-tw">tensorflow.js</a>是一個JavaScript的套件，讓機器學習的模型可以在瀏覽器裡面被執行，除了可以把用python訓練出來的模型放在瀏覽器上以外，還可以使用官方包好的模型來去做有趣的應用，可以參考<a href="https://github.com/tensorflow/tfjs-examples">這邊的範例</a>來開始編寫tensorflow.js。</p>

<h2 id="pose-detection">Pose Detection</h2>

<p>在<a href="https://experiments.withgoogle.com/move-mirror">Move Mirror</a>裡面，我們可以透過使用者的動作來找到相似的圖片，主要的方法是透過CDCL的模型來去對電腦鏡頭拍攝出來的人像做辨識，從中取得每個關節的座標，接著把座標正規化以後去跟照片去算cosine similarity，而在<a href="https://blog.tensorflow.org/2018/07/move-mirror-ai-experiment-with-pose-estimation-tensorflow-js.html">部落格文章</a>當中還有講述把模型給的信心分數放進算座標距離的方法和快速計算多張照片的方式，建議閱讀文章的內容來更理解詳細的做法。</p>

<p>有了這個CDCL模型和距離計算的方式，我們可以對它稍做修改，改成給定一張照片，去計算電腦鏡頭拍攝的人像和照片的距離有多少，來讓使用者可以練習擺跟照片一樣的姿勢，我個人修改過後的結果可以<a href="https://wjohn1483.github.io/pose_copier/?model=movenet">在這邊看到</a>。</p>]]></content><author><name>Your Name</name></author><category term="Tool" /><category term="Computer-Vision" /><summary type="html"><![CDATA[隨著機器學習的模型可以做到越來越多的事情，人們希望可以在更多的場域來使用機器學習的模型，也因此它們也逐漸的被部署到除了電腦以外的裝置上，這篇文章主要是來簡單介紹一下tensorflow.js，把模型部署在瀏覽器上，讓更多人可以輕易地存取。]]></summary></entry><entry><title type="html">Python logging介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/06/04/python-logging-introduction/" rel="alternate" type="text/html" title="Python logging介紹" /><published>2022-06-04T00:00:00+00:00</published><updated>2022-06-04T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/06/04/python-logging-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/06/04/python-logging-introduction/"><![CDATA[<p>這篇文章簡單介紹一下python logging這個package的使用方法。</p>

<!--more-->

<p>在python裡面想要去debug你的程式除了使用<code class="language-plaintext highlighter-rouge">print()</code>直接把變數印出來以外，可以使用原生的<code class="language-plaintext highlighter-rouge">logging</code> package來去把log給印出來。</p>

<h2 id="log的分類">Log的分類</h2>

<p>在開始介紹logging怎麼使用之前，我們可以先來認識一下log有分成不同的等級，在<a href="https://docs.python.org/3/howto/logging.html#when-to-use-logging">python的文件</a>中有介紹什麼時候該使用哪種方法來顯示訊息，像是<code class="language-plaintext highlighter-rouge">print()</code>主要是用來顯示usage等一般用途，而<code class="language-plaintext highlighter-rouge">logging.warning()</code>是表示發現到有問題，但並不影響執行，詳細的介紹建議閱讀上面的文件，底下簡單介紹一下log的分級。</p>

<ul>
  <li>
    <p>DEBUG：顯示詳細的訊息，主要是在追查問題的時候使用</p>
  </li>
  <li>
    <p>INFO：顯示確認的訊息，表示程式有正確地在執行</p>
  </li>
  <li>
    <p>WARNING：表示有些預料外的事情發生或預告可能的問題像是硬碟空間快不夠了，但程式仍可以繼續執行</p>
  </li>
  <li>
    <p>ERROR：程式執行的過程當中碰到了一些問題，可能有些function不能被執行了</p>
  </li>
  <li>
    <p>CRITICAL：程式碰到了更嚴重的問題，已經無法繼續執行</p>
  </li>
</ul>

<h2 id="簡單使用logging">簡單使用logging</h2>

<p>在<code class="language-plaintext highlighter-rouge">logging</code>裡面有根據上述不同等級的log有對應的function可以呼叫，可以看底下的例子</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>

<span class="n">logging</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="s">"Debug message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"Info message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="s">"Warning message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s">"Error message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">critical</span><span class="p">(</span><span class="s">"Critical message"</span><span class="p">)</span>
</code></pre></div></div>

<p>在實際執行上面的程式碼以後我們可以得到下面的結果</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING:root:Warning message
ERROR:root:Error message
CRITICAL:root:Critical message
</code></pre></div></div>

<p>在使用<code class="language-plaintext highlighter-rouge">logging</code>的function時，<code class="language-plaintext highlighter-rouge">logging</code>會去創建一個名叫<code class="language-plaintext highlighter-rouge">root</code>的logger，並把訊息透過這個logger來紀錄，而其預設的格式是<code class="language-plaintext highlighter-rouge">severity:logger name:message</code>，而且只會顯示WARNING以上的訊息，如果想要設定顯示哪種log的等級的話，可以在最前面呼叫<code class="language-plaintext highlighter-rouge">basicConcig()</code>來設定</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>

<span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="s">"Debug message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"Info message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="s">"Warning message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s">"Error message"</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">critical</span><span class="p">(</span><span class="s">"Critical message"</span><span class="p">)</span>
</code></pre></div></div>

<p>此時得到的結果會是</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG:root:Debug message
INFO:root:Info message
WARNING:root:Warning message
ERROR:root:Error message
CRITICAL:root:Critical message
</code></pre></div></div>

<p>這樣的作法在當程式碼裡面有引入多個module的時候也適用</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">import</span> <span class="n">logging</span>

<span class="kn">from</span> <span class="n">lib</span> <span class="kn">import</span> <span class="n">func</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"info from main"</span><span class="p">)</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"error from main"</span><span class="p">)</span>
    <span class="nf">func</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib.py
</span><span class="kn">import</span> <span class="n">logging</span>


<span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"info from lib"</span><span class="p">)</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"error from lib"</span><span class="p">)</span>
</code></pre></div></div>

<p>在上面我們寫了兩個python script，分別為<strong>main.py</strong>和<strong>lib.py</strong>，其中<strong>main.py</strong>會去呼叫定義在<strong>lib.py</strong>裡面的<code class="language-plaintext highlighter-rouge">func()</code>，這時如果去執行<strong>main.py</strong>的話會得到下面的結果</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO:root:info from main
ERROR:root:error from main
INFO:root:info from lib
ERROR:root:error from lib
</code></pre></div></div>

<p>在<strong>lib.py</strong>裡面設定的訊息也一樣會被顯示出來，然而美中不足的是，如果我們沒有特意在log裡面留下跟檔案有關的訊息的話，就很難從log裡面看出這個是從哪裡產生出來的log了，底下會介紹python文件當中比較建議，為每個檔案建立logger的方法。</p>

<h2 id="使用複數logger">使用複數logger</h2>

<p>在上面我們碰到了無法辨別log是從哪個module產生出來的問題，而解決這個問題的<a href="https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial">建議做法</a>是對每一個module都建立專屬於他們的logger，也就是使用<code class="language-plaintext highlighter-rouge">logging.getLogger()</code>來建立logger以後，再用logger來紀錄我們的訊息。</p>

<p>這邊我們把上面例子中的<code class="language-plaintext highlighter-rouge">logging</code>都替換成<code class="language-plaintext highlighter-rouge">logger</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">import</span> <span class="n">logging</span>

<span class="kn">from</span> <span class="n">lib</span> <span class="kn">import</span> <span class="n">func</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"info from main"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"error from main"</span><span class="p">)</span>
    <span class="nf">func</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lib.py
</span><span class="kn">import</span> <span class="n">logging</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"info from lib"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"error from lib"</span><span class="p">)</span>
</code></pre></div></div>

<p>這邊我們將<code class="language-plaintext highlighter-rouge">__name__</code>傳入<code class="language-plaintext highlighter-rouge">logging.getLogger()</code>當中，這時logging就會幫我們建立一個以<code class="language-plaintext highlighter-rouge">__name__</code>為名稱的logger，而<code class="language-plaintext highlighter-rouge">__name__</code>會在python裡面被代換成檔案名稱，這時再執行<strong>main.py</strong>就能得到以下的結果</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO:__main__:info from main
ERROR:__main__:error from main
INFO:lib:info from lib
ERROR:lib:error from lib
</code></pre></div></div>

<p>如此便能方便地知道這個log是從哪個module產生的了。</p>

<h2 id="logger的階層">Logger的階層</h2>

<p>在上面的例子裡面我們建立了兩個logger，分別是<code class="language-plaintext highlighter-rouge">__main__</code>和<code class="language-plaintext highlighter-rouge">lib</code>，這兩個logger不會各自將訊息直接印出來，而是將訊息傳到他們上層的logger，讓上層logger中的handler來決定log要怎麼被處理，在這個例子裡面它們會將log傳給<code class="language-plaintext highlighter-rouge">root</code>這個logger，再去看<code class="language-plaintext highlighter-rouge">root</code>裡面的handler的設定來去做處理，詳細的處理流程可以參考<a href="https://docs.python.org/3/howto/logging.html#logging-flow">文件</a></p>

<p><img src="https://docs.python.org/3/_images/logging_flow.png" alt="Logging Flow" /></p>

<p>雖然在程式碼裡面看起來我們沒有為root logger設定任何handler，但其實在我們呼叫<code class="language-plaintext highlighter-rouge">logging.basicConfig()</code>的時候它就會<a href="https://docs.python.org/dev/library/logging.html#logging.basicConfig">自動幫我們建立好</a>，如果想要自行設定的話也可以使用<code class="language-plaintext highlighter-rouge">logging.getLogger()</code>，在其中不給任何的參數來拿到root logger，接著再透過<code class="language-plaintext highlighter-rouge">logger.addHandler()</code>來去新增handler。</p>

<h2 id="logging-format">Logging Format</h2>

<p>如果說我們想要自定義顯示出來的log的格式的話，可以在<code class="language-plaintext highlighter-rouge">logging.basicConfig()</code>的地方設定root logger中handler印出log的格式，因為底下的logger會把log往上傳給root logger，所以只需要在root logger中設定好，所有印出來的log都會是一樣的格式。</p>

<p>假如我們在<strong>main.py</strong>裡面多加個參數</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>

<span class="kn">from</span> <span class="n">lib</span> <span class="kn">import</span> <span class="n">func</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"info from main"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"error from main"</span><span class="p">)</span>
    <span class="nf">func</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">log_format</span><span class="o">=</span><span class="s">"%(asctime)s %(filename)s:%(lineno)d - %(message)s"</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="n">log_format</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>而<strong>lib.py</strong>維持不變，這時印出來的訊息就會變成</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-06-04 23:02:58,775 main.py:8 - info from main
2022-06-04 23:02:58,775 main.py:9 - error from main
2022-06-04 23:02:58,775 lib.py:6 - info from lib
2022-06-04 23:02:58,775 lib.py:7 - error from lib
</code></pre></div></div>

<p>更多logging支援的attribute，可以看其<a href="https://docs.python.org/3/library/logging.html#logrecord-attributes">官方文件</a>。</p>

<h3 id="在log中加入顏色">在log中加入顏色</h3>

<p>如果想在terminal裡面讓不同等級的log有不同顏色的話，可以參考從<a href="https://stackoverflow.com/questions/384076/how-can-i-color-python-logging-output">這裡</a>改編而來的方法，寫一個<strong>log.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># log.py
</span><span class="kn">import</span> <span class="n">logging</span>


<span class="k">class</span> <span class="nc">CustomFormatter</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">Formatter</span><span class="p">):</span>
    <span class="n">grey</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[38;20m"</span>
    <span class="n">cyan</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[36;20m"</span>
    <span class="n">light_green</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[32;20m"</span>
    <span class="n">yellow</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[33;20m"</span>
    <span class="n">red</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[31;20m"</span>
    <span class="n">bold_red</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[31;1m"</span>
    <span class="n">reset</span> <span class="o">=</span> <span class="s">"</span><span class="se">\x1b</span><span class="s">[0m"</span>
    <span class="n">log_format</span> <span class="o">=</span> <span class="s">"%(asctime)s - %(name)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"</span>

    <span class="n">FORMATS</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">:</span> <span class="n">light_green</span> <span class="o">+</span> <span class="n">log_format</span> <span class="o">+</span> <span class="n">reset</span><span class="p">,</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">:</span> <span class="n">cyan</span> <span class="o">+</span> <span class="n">log_format</span> <span class="o">+</span> <span class="n">reset</span><span class="p">,</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">WARNING</span><span class="p">:</span> <span class="n">yellow</span> <span class="o">+</span> <span class="n">log_format</span> <span class="o">+</span> <span class="n">reset</span><span class="p">,</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">ERROR</span><span class="p">:</span> <span class="n">red</span> <span class="o">+</span> <span class="n">log_format</span> <span class="o">+</span> <span class="n">reset</span><span class="p">,</span>
        <span class="n">logging</span><span class="p">.</span><span class="n">CRITICAL</span><span class="p">:</span> <span class="n">bold_red</span> <span class="o">+</span> <span class="n">log_format</span> <span class="o">+</span> <span class="n">reset</span>
    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">record</span><span class="p">):</span>
        <span class="n">log_fmt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">FORMATS</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">record</span><span class="p">.</span><span class="n">levelno</span><span class="p">)</span>
        <span class="n">formatter</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nc">Formatter</span><span class="p">(</span><span class="n">log_fmt</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">formatter</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>


<span class="n">root_logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">()</span>
<span class="n">root_handler</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nc">StreamHandler</span><span class="p">()</span>
<span class="n">root_handler</span><span class="p">.</span><span class="nf">setFormatter</span><span class="p">(</span><span class="nc">CustomFormatter</span><span class="p">())</span>
<span class="n">root_logger</span><span class="p">.</span><span class="nf">addHandler</span><span class="p">(</span><span class="n">root_handler</span><span class="p">)</span>
</code></pre></div></div>

<p>在上面的程式碼裡面我們自訂了一個formatter，並根據不同等級的log加入不同顏色的前綴和後綴，而且在底下也設定了root logger的handler，要使用的時候我們在新的程式碼裡面簡單import它並設定level就可以了</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">import</span> <span class="n">logging</span>

<span class="kn">import</span> <span class="n">log</span>
<span class="kn">from</span> <span class="n">lib</span> <span class="kn">import</span> <span class="n">func</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="s">"debug message"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"info message"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="s">"warning message"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s">"error message"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">critical</span><span class="p">(</span><span class="s">"critical message"</span><span class="p">)</span>
    <span class="nf">func</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">().</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>跑出來的log就能有顏色了</p>

<p><img src="./colorful_log.png" alt="Colorful Log" /></p>

<p>不過要小心的是，如果把log寫成檔案的話，這些顏色前綴和後綴都會被寫進檔案裡面，建議視情況來使用</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[32<span class="p">;</span>20m2022-06-09 18:20:41,750 - __main__ - DEBUG - debug message <span class="o">(</span>main.py:11<span class="o">)</span>[0m
[36<span class="p">;</span>20m2022-06-09 18:20:41,750 - __main__ - INFO - info message <span class="o">(</span>main.py:12<span class="o">)</span>[0m
[33<span class="p">;</span>20m2022-06-09 18:20:41,750 - __main__ - WARNING - warning message <span class="o">(</span>main.py:13<span class="o">)</span>[0m
[31<span class="p">;</span>20m2022-06-09 18:20:41,750 - __main__ - ERROR - error message <span class="o">(</span>main.py:14<span class="o">)</span>[0m
[31<span class="p">;</span>1m2022-06-09 18:20:41,750 - __main__ - CRITICAL - critical message <span class="o">(</span>main.py:15<span class="o">)</span>[0m
[36<span class="p">;</span>20m2022-06-09 18:20:41,750 - lib - INFO - info from lib <span class="o">(</span>lib.py:8<span class="o">)</span>[0m
[31<span class="p">;</span>20m2022-06-09 18:20:41,750 - lib - ERROR - error from lib <span class="o">(</span>lib.py:9<span class="o">)</span>[0m
</code></pre></div></div>]]></content><author><name>Your Name</name></author><category term="Tool" /><category term="Python" /><summary type="html"><![CDATA[這篇文章簡單介紹一下python logging這個package的使用方法。]]></summary></entry><entry><title type="html">MLflow介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/29/mlflow-introduction/" rel="alternate" type="text/html" title="MLflow介紹" /><published>2022-05-29T00:00:00+00:00</published><updated>2022-05-29T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/29/mlflow-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/29/mlflow-introduction/"><![CDATA[<p>隨著機器學習的興起，有越來越多人嘗試引入MLOps在系統當中，這篇文章簡單介紹一下MLflow的使用心得。</p>

<!--more-->

<h2 id="mlops">MLOps</h2>

<p>在開始介紹MLflow之前先簡單介紹一下MLOps想要做的事情，MLOps可以說跟DevOps一樣是一種精神，主要是希望能讓Machine Learning跟Operations能夠合作的更融洽，這邊Machine Learning的部分包含了對資料清理、建立並訓練模型、驗證模型成效等等的事情，而Operations指的是把模型部署到系統裡面進行預測。</p>

<p><img src="https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-2-manual-ml.svg" alt="MLOps Manual Process" /></p>

<p><em><a href="https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning#devops_versus_mlops">MLOps: Continuous delivery and automation pipelines in machine learning</a></em></p>

<p>上圖是一個簡單的pipeline，左半邊ML的部分是一般machine learning的流程，包含了資料處理和建立模型的過程，而最終產生的模型會放進model registry裡面，Operations再從model registry裡面把模型拿出來做serving。</p>

<p>這個pipeline簡單有效，但如果未來有新的資料進來或是模型的成效開始下降等可能會需要重新訓練的模型的情況發生的話，Operations就會需要再請ML的人幫忙訓練模型，為此另一個比較穩定的pipeline可以是如下圖。</p>

<p><img src="https://cloud.google.com/architecture/images/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-3-ml-automation-ct.svg" alt="MLOps Pipeline Automation" /></p>

<p><em><a href="https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning#devops_versus_mlops">MLOps: Continuous delivery and automation pipelines in machine learning</a></em></p>

<p>在這個pipeline裡面，ML所交付的不再是一個模型，而是產生出這個模型的pipeline，包含了資料驗證、清理、建立模型、驗證模型等，而Operations會將這個pipeline部署到系統裡面自行去產生模型出來，如果說有新的資料或是有需要重新訓練模型的情況發生，Operations就能直接重跑這個pipeline來得到新的模型。</p>

<p>然而要建立這種pipeline會需要花費蠻多工夫的，而MLflow可以幫助我們降低一些建立這種pipeline的困難。</p>

<h2 id="mlflow">MLflow</h2>

<p><a href="https://mlflow.org/">MLflow</a>是一個開源的平台，主要是應用在machine learning lifecycle當中，MLflow包含了四個部分</p>

<ul>
  <li>
    <p>Tracking：用以記錄在訓練模型是所使用的參數和訓練過程中的一些metrics</p>
  </li>
  <li>
    <p>Projects：讓使用者可以建立一套pipeline來讓其他人可以輕易地重現出模型</p>
  </li>
  <li>
    <p>Models：把模型包裝起來，在裡面會紀錄讓模型運行所需要的環境和模型本身，讓其他人方便直接使用模型</p>
  </li>
  <li>
    <p>Registry：存放模型並支援版本控制</p>
  </li>
</ul>

<p>底下的文章將會簡述一下Tracking和Projects的部分。</p>

<h3 id="mlflow-tracking">MLflow Tracking</h3>

<p>我們先快速看一下底下的程式碼</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">mlflow</span> <span class="kn">import</span> <span class="n">log_metric</span><span class="p">,</span> <span class="n">log_param</span><span class="p">,</span> <span class="n">log_artifact</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="c1"># Log a parameter (key-value pair)
</span>    <span class="nf">log_param</span><span class="p">(</span><span class="s">"param1"</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">)</span>
    <span class="nf">log_param</span><span class="p">(</span><span class="s">"param2"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span><span class="c1"># Log a metric; metrics can be updated throughout the run
</span>    <span class="nf">log_metric</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nf">log_metric</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">log_metric</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="c1"># Log an artifact (output file)
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"output1.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s">"first file!"</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"output2.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s">"second file!"</span><span class="p">)</span>
    <span class="nf">log_artifact</span><span class="p">(</span><span class="s">"output1.txt"</span><span class="p">)</span>
    <span class="nf">log_artifact</span><span class="p">(</span><span class="s">"output2.txt"</span><span class="p">)</span>
</code></pre></div></div>

<p>在上面的程式碼中我們可以看到mlflow提供了三種不同log的function，<code class="language-plaintext highlighter-rouge">log_param</code>用來記錄這次訓練模型時所使用的hyperparameters像是learning rate、batch size等等，而<code class="language-plaintext highlighter-rouge">log_metric</code>用來記錄訓練模型中會變動的資料，像是loss、accuracy等，最後<code class="language-plaintext highlighter-rouge">log_artifact</code>會把該路徑的檔案放進artifact中，主要是把這次訓練完成以後想要留存的檔案儲存下來，像是模型本身、前處理/後處理用到的字典檔等。</p>

<p>有了這些function以後，我們就能在編寫程式的時候把這些function安插進來，之後就能在command line上面下<code class="language-plaintext highlighter-rouge">mlflow server</code>的指令來打開mlflow的UI來檢視訓練的成果，然而每次手動寫這些function有點麻煩，mlflow有另外提供了auto tracking的功能，只需要在程式碼裡面加個幾行，mlflow就會幫你自動紀錄這些參數和結果了。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""Trains and evaluate a simple MLP
on the Reuters newswire topic classification task.
"""</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.datasets</span> <span class="kn">import</span> <span class="n">reuters</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Activation</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.preprocessing.text</span> <span class="kn">import</span> <span class="n">Tokenizer</span>

<span class="c1"># The following import and function call are the only additions to code required
# to automatically log metrics and parameters to MLflow.
</span><span class="kn">import</span> <span class="n">mlflow.keras</span>

<span class="n">mlflow</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="nf">autolog</span><span class="p">()</span>

<span class="n">max_words</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="mi">5</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"Loading data..."</span><span class="p">)</span>
</code></pre></div></div>

<p><em><a href="https://github.com/mlflow/mlflow/blob/master/examples/keras/train.py">mlflow/examples/keras/train.py</a></em></p>

<p>在上面是一個用keras訓練模型的範例，在裡面我們只需要加入<code class="language-plaintext highlighter-rouge">import mlflow.keras</code>、<code class="language-plaintext highlighter-rouge">mlflow.keras.autolog()</code>這兩行就能讓mlflow幫我們紀錄參數了。</p>

<p><img src="./mlflow_keras.png" alt="MLflow Keras" /></p>

<h3 id="mlflow-projects">MLflow Projects</h3>

<p>假如我們想要分享我們訓練模型所做的所有步驟，我們可以寫一個<code class="language-plaintext highlighter-rouge">MLproject</code>的檔案，來讓其他人可以簡單下一個指令<code class="language-plaintext highlighter-rouge">mlflow run .</code>就能重現模型訓練的結果。</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">mnist-autolog-example</span>

<span class="na">conda_env</span><span class="pi">:</span> <span class="s">conda.yaml</span>

<span class="na">entry_points</span><span class="pi">:</span>
  <span class="na">main</span><span class="pi">:</span>
    <span class="na">parameters</span><span class="pi">:</span>
      <span class="na">max_epochs</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type</span><span class="pi">:</span> <span class="nv">int</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">5</span><span class="pi">}</span>
      <span class="na">gpus</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type</span><span class="pi">:</span> <span class="nv">int</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">0</span><span class="pi">}</span>
      <span class="na">strategy</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type str</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="s2">"</span><span class="s">None"</span><span class="pi">}</span>
      <span class="na">batch_size</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type</span><span class="pi">:</span> <span class="nv">int</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">64</span><span class="pi">}</span>
      <span class="na">num_workers</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type</span><span class="pi">:</span> <span class="nv">int</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">3</span><span class="pi">}</span>
      <span class="na">learning_rate</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type</span><span class="pi">:</span> <span class="nv">float</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">0.001</span><span class="pi">}</span>
      <span class="na">patience</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type int</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">3</span><span class="pi">}</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type str</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">min'</span><span class="pi">}</span>
      <span class="na">verbose</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type bool</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="nv">True</span><span class="pi">}</span>
      <span class="na">monitor</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">type str</span><span class="pi">,</span> <span class="nv">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">val_loss'</span><span class="pi">}</span>

    <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">python mnist_autolog_example.py \</span>
            <span class="s">--max_epochs {max_epochs} \</span>
            <span class="s">--gpus {gpus} \</span>
            <span class="s">--strategy {strategy} \</span>
            <span class="s">--batch_size {batch_size} \</span>
            <span class="s">--num_workers {num_workers} \</span>
            <span class="s">--lr {learning_rate} \</span>
            <span class="s">--es_patience {patience} \</span>
            <span class="s">--es_mode {mode} \</span>
            <span class="s">--es_verbose {verbose} \</span>
            <span class="s">--es_monitor {monitor}</span>
</code></pre></div></div>

<p><em><a href="https://github.com/mlflow/mlflow/blob/master/examples/pytorch/MNIST/MLproject">mlflow/examples/pytorch/MNIST/MLproject</a></em></p>

<p>MLflow在讀取這個檔案的時候會先在conda裡面建立一個virtual environment，並按照<code class="language-plaintext highlighter-rouge">conda.yaml</code>的設定來去安裝package們，接下來會去執行entry_points裡面<code class="language-plaintext highlighter-rouge">main</code>的部分，如果說想要使用不同的參數試試看的話，可以使用<code class="language-plaintext highlighter-rouge">mlflow run . -P PARAM=VALUE</code>的方式來去替換掉預設值。</p>

<p>如果在整個pipeline中還有其他資料處理或模型驗證的步驟，可以參考<a href="https://github.com/mlflow/mlflow/tree/master/examples/multistep_workflow">multistep_workflow</a>的範例。</p>

<h2 id="結論">結論</h2>

<p>要把整個pipeline包裝成可重複執行的程式碼還是需要蠻多工夫的，好在MLflow可以幫我們省去一些，而且其auto tracking的功能也很適合在做實驗的過程當中來使用。</p>

<p>另外在實作的過程當中值得一提的是，如果想要在auto tracking當中另外手動存入其他artifact，需要把<code class="language-plaintext highlighter-rouge">log_artifact</code>這個function放在同一個run裡面</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">mlflow</span><span class="p">.</span><span class="nf">start_run</span><span class="p">()</span> <span class="k">as</span> <span class="n">run</span><span class="p">:</span>
    <span class="n">mlflow</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="nf">autolog</span><span class="p">()</span>
    <span class="c1"># Training
</span>    <span class="n">mlflow</span><span class="p">.</span><span class="nf">log_artifact</span><span class="p">(</span><span class="s">"PATH_TO_ARTIFACT"</span><span class="p">)</span>
</code></pre></div></div>

<p>而在pipeline處理的過程中，假如說我們有個entry point是處理資料、另一個entry point是訓練模型，我們應該會希望每次pipeline跑起來便去檢查資料是否已經處理好了，如果已經處理好就直接跑訓練模型的部分就好，我目前還沒有在MLflow看到比較好的看有沒有執行過某個entry point的方法，可能還是需要像前面<a href="https://github.com/mlflow/mlflow/tree/master/examples/multistep_workflow">multistep_workflow</a>的範例那樣，自己寫個<code class="language-plaintext highlighter-rouge">main.py</code>來去檢查。</p>

<h2 id="參考資料">參考資料</h2>

<ul>
  <li>
    <p><a href="https://medium.com/ai-blog-tw/%E7%B5%A6ml-engineer%E7%9A%84mlops%E7%B0%A1%E8%BF%B0-%E6%8C%81%E7%BA%8C%E9%96%8B%E7%99%BC%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92service%E7%9A%84%E9%AB%98%E6%95%88%E7%90%86%E5%BF%B5-8bd552876299">給ML Engineer的MLOps簡述: 持續開發機器學習Service的高效理念</a></p>
  </li>
  <li>
    <p><a href="https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning#devops_versus_mlops">MLOps: Continuous delivery and automation pipelines in machine learning</a></p>
  </li>
</ul>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[隨著機器學習的興起，有越來越多人嘗試引入MLOps在系統當中，這篇文章簡單介紹一下MLflow的使用心得。]]></summary></entry><entry><title type="html">Learning Hierarchy-Aware Knowledge Graph Embeddings for Link Prediction</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/14/Learning-Hierarchy-Aware-Knowledge-Graph-Embeddings-for-Link-Prediction/" rel="alternate" type="text/html" title="Learning Hierarchy-Aware Knowledge Graph Embeddings for Link Prediction" /><published>2022-05-14T00:00:00+00:00</published><updated>2022-05-14T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/14/Learning-Hierarchy-Aware-Knowledge-Graph-Embeddings-for-Link-Prediction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/14/Learning-Hierarchy-Aware-Knowledge-Graph-Embeddings-for-Link-Prediction/"><![CDATA[<p>簡單記錄一下看完這篇paper的筆記。</p>

<!--more-->

<p><a href="https://arxiv.org/abs/1911.09419">這篇paper</a>是AAAI 2020中被發表的paper，相較於其他knowledge graph的paper，這篇paper把所有的entity都放進極座標當中，希望讓模型學習到越內層的entity是階層中比較高的，越外層的eneity是階層中比較低的。</p>

<h2 id="hierarchy-aware-knowledge-graph-embedding-hake">Hierarchy-Aware Knowledge Graph Embedding (HAKE)</h2>

<p><img src="./model_illustration.png" alt="Model Illustration" /></p>

<h3 id="annotation">Annotation</h3>

<p>在輸入給模型的資料當中，主要會是各個entity之間的relation，寫作<code class="language-plaintext highlighter-rouge">(head, relation, tail)</code>，指得是說<code class="language-plaintext highlighter-rouge">head</code>和<code class="language-plaintext highlighter-rouge">tail</code>之間有<code class="language-plaintext highlighter-rouge">relation</code>，而<code class="language-plaintext highlighter-rouge">head</code>是比較上層的，以上面圖片中的例子來說，可能的資料會是</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">(Device,</span><span class="w"> </span><span class="err">has_function,</span><span class="w"> </span><span class="err">Source)</span><span class="w">
</span><span class="err">(Device,</span><span class="w"> </span><span class="err">has_function,</span><span class="w"> </span><span class="err">Support)</span><span class="w">
</span><span class="err">(Source,</span><span class="w"> </span><span class="err">has_object,</span><span class="w"> </span><span class="err">Lamp)</span><span class="w">
</span><span class="err">(Source,</span><span class="w"> </span><span class="err">has_object,</span><span class="w"> </span><span class="err">Light)</span><span class="w">
</span><span class="err">...</span><span class="w">
</span></code></pre></div></div>

<p>在paper裡面我們會給每一個<code class="language-plaintext highlighter-rouge">head</code>、<code class="language-plaintext highlighter-rouge">relation</code>和<code class="language-plaintext highlighter-rouge">tail</code>各一個embedding，分別寫作$\mathbf{h}$、$\mathbf{r}$和$\mathbf{t}$，其中因為作者想要將embedding存在在極座標當中，所以每一個embedding都會存在有modulus和phase的這兩個部分，以head的embedding為例，他們分別會被寫作$\mathbf{h}_m$、$\mathbf{h}_p$。</p>

<h3 id="modulus-distance">Modulus Distance</h3>

<p>在計算兩個embedding相似性的時候，會把modulus和phase這兩個部分拆開來看，我們會希望$\mathbf{h}_m$在經過relation的轉換以後，越像$\mathbf{t}_m$越好，亦即</p>

\[\mathbf{h}_m \circ \mathbf{r}_m = \mathbf{t}_m\]

<p>而距離的部分就是看實際上跟預期的落差有多少</p>

\[d_{r,m}(\mathbf{h}_m, \mathbf{t}_m)=\left\| \mathbf{h}_m\circ\mathbf{r}_m-\mathbf{t}_m\right\|_2\]

<p>其中值得一提的是，雖然embedding本身可以有負值，但$\mathbf{r}_m$的部分會限制裡面所有的值都必須要大於零，原因是因為我們想要階層比較高的entity在接近原點的位置，由於$[\mathbf{r}_m]_i&gt;0$的特性，模型漸漸地就會將階層低的embedding往外推了。</p>

<h3 id="phase-distance">Phase Distance</h3>

<p>在phase的部分跟modulus差不多，我們希望$\mathbf{h}_p$在經過relation的轉換以後，越像$\mathbf{t}_p$越好</p>

\[(\mathbf{h}_p+\mathbf{r}_p)\mod 2\pi=\mathbf{t}_p,\ where\ \mathbf{h}_p,\mathbf{r}_p,\mathbf{t}_p\in[0,2\pi)^k\]

<p>距離上也是看兩者相差多少</p>

\[d_{r,p}(\mathbf{h}_p, \mathbf{t}_p)=\left\| \sin((\mathbf{h}_p+\mathbf{r}_p-\mathbf{t}_p)/2)\right\|_1\]

<h3 id="loss-function">Loss Function</h3>

<p>上面分別定義了modulus distance和phase distance，兩個entity實際的距離便可定義成</p>

\[d_r(\mathbf{h},\mathbf{t})=d_{r,m}(\mathbf{h}_m,\mathbf{t}_m)+\lambda d_{r,p}(\mathbf{h}_p,\mathbf{t}_p)\]

<p>其中的$\lambda$是由model自行學出的參數（$\lambda\in\mathbb{R}$），而loss function便是用self-adversarial的loss，希望positive sample的距離要小於$\gamma$，negative sample的距離要大於$\gamma$</p>

\[L=-\log\sigma(\gamma-d_r(\mathbf{h},\mathbf{t}))-\sum\limits^{n}\limits_{i=1}p(h'_i,r,t'_i)\log\sigma(d_r(\mathbf{h}'_i,\mathbf{t}'_i)-\gamma)\]

\[p(h'_j,r,y'_j\vert\left\{(h_i,r_i,t_i)\right\})=\frac{\exp\alpha f_r(\mathbf{h}'_j,\mathbf{t}'_j)}{\sum_i\exp\alpha f_r(\mathbf{h}'_i,\mathbf{t}'_i)},\ where\ \alpha\ is\ temperature\]

\[f_r(\mathbf{h},\mathbf{t})=-d_r(\mathbf{h},\mathbf{t})=-d_{r,m}(\mathbf{h},\mathbf{t})-\lambda d_{r,p}(\mathbf{h},\mathbf{t})\]

<h2 id="experiments">Experiments</h2>

<p>作者把這個HAKE模型使用在底下三個dataset上，它們的一些數據放在底下的表格中。</p>

<p><img src="./datasets.png" alt="Datasets" /></p>

<p><img src="./results.png" alt="Results" /></p>

<p>上面是與其他模型在這三個dataset上的比較，可以看到HAKE的表現不俗。</p>]]></content><author><name>Your Name</name></author><category term="Paper" /><category term="Graph-Model" /><summary type="html"><![CDATA[簡單記錄一下看完這篇paper的筆記。]]></summary></entry><entry><title type="html">Superset介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/02/superset-introduction/" rel="alternate" type="text/html" title="Superset介紹" /><published>2022-05-02T00:00:00+00:00</published><updated>2022-05-02T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/02/superset-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/05/02/superset-introduction/"><![CDATA[<p>這篇文章簡單記錄一下如何安裝superset並從Google Sheets和CSV當中匯入資料做成dashboard。</p>

<!--more-->

<h2 id="superset簡介">Superset簡介</h2>

<p>Superset是個最早由Airbnb開發，後來開源到Apache的businese intelligence工具，讓使用者可以方便地視覺化資料庫裡面的資料，而這邊的資料庫除了常見的PostgreSQL、Hive以外，還支援從Google Sheets和使用者上傳的CSV來當作資料的源頭。</p>

<h2 id="安裝superset">安裝Superset</h2>

<p>這邊放上我安裝時使用的指令，其他的安裝方法或詳細的介紹可以參考<a href="https://superset.apache.org/docs/installation/installing-superset-from-scratch">官方的安裝文件</a>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel cyrus-sasl-devel openldap-devel bzip2-devel xz-devel
pip3 <span class="nb">install</span> <span class="nt">--upgrade</span> pip
pip3 <span class="nb">install </span>apache-superset <span class="nv">MarkupSafe</span><span class="o">==</span>2.0.1
<span class="c"># Recompile python if is shows python cannot import bz2</span>

<span class="nb">export </span><span class="nv">FLASK_APP</span><span class="o">=</span>superset
superset db upgrade

<span class="c"># Create default roles and permissions</span>
superset init

<span class="c"># Create an admin user in your metadata database (use `admin` as username to be able to load the examples)</span>
superset fab create-admin

<span class="c"># Load some data to play with</span>
superset load_examples

<span class="c"># To start a development web server on port 8088, use -p to bind to another port</span>
superset run <span class="nt">-p</span> 8088 <span class="nt">--with-threads</span> <span class="nt">--reload</span> <span class="nt">--debugger</span>
</code></pre></div></div>

<p>在上面的指令中，我們有建立了一個admin帳號，其帳號密碼都是<code class="language-plaintext highlighter-rouge">admin</code>，並在最後一行的指令啟動了superset，這時理論上連到<code class="language-plaintext highlighter-rouge">localhost:8088</code>就能看到superset的UI了。</p>

<h2 id="製作dashboard流程">製作Dashboard流程</h2>

<p>在superset裡面要製作最後的dashboard前有幾個步驟需要先執行：</p>

<ol>
  <li>
    <p>建立Database：與database建立連線，讓superset能從database裡面撈取資料出來。</p>
  </li>
  <li>
    <p>建立Dataset：從database裡面引入table，在database裡面可能有千千萬萬個table，這邊我們需要告訴superset我們有興趣的table是哪些，只把有興趣的table schema引入到superset裡面。</p>
  </li>
  <li>
    <p>製作chart：引入了table以後，就能寫SQL或是用預先定義好的metric（$SUM(\star)$、$COUNT(\star)$）來視覺化table的資訊。</p>
  </li>
  <li>
    <p>製作dashboard：把前一個步驟製作的chart的呈現在一個dashboard中，方便一次瀏覽多個table視覺化的結果。</p>
  </li>
</ol>

<h2 id="建立database">建立Database</h2>

<p>底下介紹如何使用連結Google Sheets和PostgreSQL這兩個database，如果想要連結其他database的話，可以參考<a href="https://superset.apache.org/docs/databases/installing-database-drivers">官方文件</a>。由於superset主要是由python所編寫的，為了要能跟database做連線，我們需要安裝相關database的python API，在文件裡面有建議要安裝哪些套件。</p>

<h3 id="google-sheets">Google Sheets</h3>

<h4 id="安裝driver">安裝driver</h4>

<p>因為在 前面是透過<code class="language-plaintext highlighter-rouge">pip3 install</code>來安裝superset的，所以在這邊也只需要簡單的安裝pip package就能讓superset使用了，不過有可能會需要重新啟動superset來讓它吃到最新的API。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>shillelagh
</code></pre></div></div>

<h4 id="引入database">引入database</h4>

<p>在安裝好Google Sheets driver以後，在superset的UI上面點選<code class="language-plaintext highlighter-rouge">Data&gt;Databases</code>，在右邊可以看到新增Database的按鈕，點下去以後理論上就能看到<code class="language-plaintext highlighter-rouge">Google Sheets</code>的選項了。</p>

<p><img src="./supported_databases_google_sheets.png" alt="Supported Databases - Google Sheets" /></p>

<p>在下一個畫面當中只要填上相對應的名稱和網址就能順利建立了，需要注意的是Google Sheets的權限必須要設定成所有人都能觀看才能引入，如果想要讓私人的Google Sheets能被superset讀取的話，可以參考<a href="https://docs.preset.io/docs/google-sheets-private-connection">這篇文章</a>，另外Google Sheets裡面每一個不同的tab都需要手動新增進來，假如說我們想要引入這個sheets裡面的<code class="language-plaintext highlighter-rouge">Simple sheet</code>、<code class="language-plaintext highlighter-rouge">2 header sheet</code>和<code class="language-plaintext highlighter-rouge">birth_names</code>的話，就會需要填寫以下的設定。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Name: simple sheet
URL: https://docs.google.com/spreadsheets/d/1_rN3lm0R_bU3NemO0s9pbFkY5LQPcuy1pscv8ZXPtg8/edit#gid<span class="o">=</span>0

Name: 2 header sheet
URL: https://docs.google.com/spreadsheets/d/1_rN3lm0R_bU3NemO0s9pbFkY5LQPcuy1pscv8ZXPtg8/edit#gid<span class="o">=</span>1077884006

Name: birth names
URL: https://docs.google.com/spreadsheets/d/1_rN3lm0R_bU3NemO0s9pbFkY5LQPcuy1pscv8ZXPtg8/edit#gid<span class="o">=</span>174770703
</code></pre></div></div>

<h3 id="postgresql">PostgreSQL</h3>

<h4 id="安裝postgresql">安裝PostgreSQL</h4>

<p>安裝PostgreSQL的方式在不同的OS上不太一樣，這邊貼上我安裝時使用的指令。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
<span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> postgresql14-server
<span class="nb">sudo</span> /usr/pgsql-14/bin/postgresql-14-setup initdb
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>postgresql-14
<span class="nb">sudo </span>systemctl start postgresql-14
</code></pre></div></div>

<p>安裝好PostgreSQL以後，我們需要在其中建立使用者帳號，可以參考底下的指令，記得將<code class="language-plaintext highlighter-rouge">USER_NAME</code>替換成自己的帳號名稱。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-i</span> <span class="nt">-u</span> postgres
createuser USER_NAME
createdb USER_NAME
</code></pre></div></div>

<p>如果順利的話，理論上在自己帳號底下執行<code class="language-plaintext highlighter-rouge">psql</code>應該就能進入PostgreSQL的介面了，這時我們需要幫這個帳號設定一個密碼方便superset來登入。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># In psql command line</span>
alter user USER_NAME password <span class="s1">'PASSWORD'</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="安裝driver-1">安裝driver</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>psycopg2-binary
</code></pre></div></div>

<h4 id="引入database-1">引入database</h4>

<p>安裝好driver以後，在按下新增database的按鈕時，應該就能看到PostgreSQL的選項了，這邊貼上預設的設定，理論上把<code class="language-plaintext highlighter-rouge">USER_NAME</code>、<code class="language-plaintext highlighter-rouge">PASSWORD</code>替換成自行設定的值後按下connect就可以了。</p>

<p><img class="image image--xl" src="./postgresql_database_settings.png" /></p>

<p>如果希望讓superset支援CSV上傳的功能，需要在<code class="language-plaintext highlighter-rouge">ADVANCED</code>的設定中的<code class="language-plaintext highlighter-rouge">Security</code>裡面勾選<code class="language-plaintext highlighter-rouge">Allow data upload</code>的選項，上傳的CSV會在PostgreSQL裡面建立一張新的table。</p>

<h2 id="建立dataset">建立Dataset</h2>

<p>在成功引入database以後，在<code class="language-plaintext highlighter-rouge">Data&gt;Datasets</code>裡面按下新增Dataset的按鈕，選擇好database就能看到前面引入的database裡面的table們了，點選<code class="language-plaintext highlighter-rouge">ADD</code>以後就能在chart裡面讀取這些table的資料。</p>

<p><img class="image image--xl" src="./add_dataset.png" /></p>

<h2 id="製作chart">製作Chart</h2>

<p>成功引入dataset以後，在create chart的部分就能找到先前引入的dataset了，接著就能根據想看的資訊來做出漂亮的圖表。</p>

<p><img src="./create_new_chart.png" alt="Create New Chart" /></p>

<p><img src="./chart_settings.png" alt="Chart Settings" /></p>

<h2 id="製作dashboard">製作Dashboard</h2>

<p>在把table的資訊視覺化成chart以後，如果想要將多個chart顯示在同一個畫面可以使用dashboard，在建立dashboard的畫面裡面可以用拖曳的方式來把想要顯示的chart放進來。</p>

<p><img src="./dashboard_settings.png" alt="Dashboard Settings" /></p>

<p>最後按下Save就大功告成了。</p>

<p><img src="./dashboard_demo.png" alt="Dashboard Demo" /></p>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[這篇文章簡單記錄一下如何安裝superset並從Google Sheets和CSV當中匯入資料做成dashboard。]]></summary></entry><entry><title type="html">Airflow介紹</title><link href="https://wjohn1483.github.io/#%20the%20base%20hostname%20&%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/02/26/airflow-introduction/" rel="alternate" type="text/html" title="Airflow介紹" /><published>2022-02-26T00:00:00+00:00</published><updated>2022-02-26T00:00:00+00:00</updated><id>https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/02/26/airflow-introduction</id><content type="html" xml:base="https://wjohn1483.github.io/#%20the%20base%20hostname%20&amp;%20protocol%20for%20your%20site%20e.g.%20https://www.someone.com/2022/02/26/airflow-introduction/"><![CDATA[<p>這篇文章紀錄一下嘗試使用Airflow的經歷。</p>

<!--more-->

<p>之前在聽一些技術分享的時候，有聽到別人使用Airflow來作為他們的排程系統，剛好在網路上也有看到別人<a href="https://leemeng.tw/a-story-about-airflow-and-data-engineering-using-how-to-use-python-to-catch-up-with-latest-comics-as-an-example.html">使用Airflow來追漫畫連載</a>，想說我也來做一個簡單的每天登入領獎勵的程式來學習Airflow怎麼使用，底下紀錄一下製作的過程。</p>

<h2 id="安裝airflow">安裝Airflow</h2>

<p><a href="https://airflow.apache.org/">Airflow</a>是由Airbnb開發的排程系統，主要是由python編寫，安裝起來也相當地方便，只需要執行底下的指令就行。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install</span> <span class="s2">"apache-airflow[crypto, slack]"</span>
</code></pre></div></div>

<h3 id="初始化database">初始化database</h3>

<p>在安裝完成以後，會需要先初始化airflow的database，這個database會用來儲存任務執行的設定和log。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># export AIRFLOW_HOME=/path/you/want</span>
airflow db init
</code></pre></div></div>

<p>預設的路徑會放在<code class="language-plaintext highlighter-rouge">~/airflow</code>，你也可以藉由<code class="language-plaintext highlighter-rouge">export AIRFLOW_HOME</code>來選擇自己喜歡的位置。</p>

<h3 id="開啟web-server">開啟web server</h3>

<p>接下來就可以準備啟動airflow了，我們可以使用底下的指令開啟web server，並設定port為8080。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow webserver <span class="nt">-p</span> 8080
</code></pre></div></div>

<p>這時就可以連去<code class="language-plaintext highlighter-rouge">localhost:8080</code>來看到airflow的使用者介面了，但進去的時候會發現要帳號密碼才能登入，我們可以透過下面的指令來創建一個權限為admin的帳戶，其帳號密碼都是<code class="language-plaintext highlighter-rouge">admin</code>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow <span class="nb">users </span>create <span class="nt">--role</span> Admin <span class="nt">--username</span> admin <span class="nt">--email</span> admin <span class="nt">--firstname</span> admin <span class="nt">--lastname</span> admin <span class="nt">--password</span> admin
</code></pre></div></div>

<p>理論上在這個步驟做完以後就能順利地看到類似於底下的畫面了。</p>

<p><img src="./airflow_ui.png" alt="Airflow UI" /></p>

<h3 id="開啟scheduler">開啟scheduler</h3>

<p>雖說UI已經打得開了，但會發現上面的任務都沒辦法執行，原因是因為實際上排程這些任務的是scheduler，而web server就真的只是一個UI讓使用者方便使用，所以我們還需要執行底下的指令才能啟動。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>airflow scheduler
</code></pre></div></div>

<p>scheduler和web server的關係可以參考<a href="https://airflow.apache.org/docs/apache-airflow/stable/concepts/overview.html">airflow官方文件</a>裡面的架構圖。</p>

<p><img src="https://airflow.apache.org/docs/apache-airflow/stable/_images/arch-diag-basic.png" alt="Airflow Architecture" /></p>

<h2 id="建立屬於自己的任務">建立屬於自己的任務</h2>

<p>前面有提到airflow主要是由python來編寫的，當我們要加入一個新的任務時，我們也是寫一個python的script，並放入<code class="language-plaintext highlighter-rouge">${AIRFLOW_HOME}/dags/</code>（預設是<code class="language-plaintext highlighter-rouge">~/airflow/dags/</code>）這個路徑底下，airflow就會自動抓取你寫的script，在UI上面顯示出來。</p>

<h3 id="airflow-python-script">Airflow Python Script</h3>

<p>一個簡單的任務可以參考底下的程式碼。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>

<span class="kn">from</span> <span class="n">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="n">airflow.operators.python_operator</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
<span class="kn">from</span> <span class="n">airflow.operators.dummy_operator</span> <span class="kn">import</span> <span class="n">DummyOperator</span>


<span class="k">def</span> <span class="nf">login_func</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Attempt to login with account = </span><span class="si">{</span><span class="n">account</span><span class="si">}</span><span class="s">, password = </span><span class="si">{</span><span class="n">password</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>


<span class="n">account</span> <span class="o">=</span> <span class="s">"user"</span>
<span class="n">password</span> <span class="o">=</span> <span class="s">"password"</span>
<span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"owner"</span><span class="p">:</span> <span class="s">"THE_ONE"</span><span class="p">,</span>
    <span class="s">"start_date"</span><span class="p">:</span> <span class="nf">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"schedule_interval"</span><span class="p">:</span> <span class="s">"@daily"</span><span class="p">,</span>
    <span class="s">"retries"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s">"retry_delay"</span><span class="p">:</span> <span class="nf">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">with</span> <span class="nc">DAG</span><span class="p">(</span><span class="s">"login_dag"</span><span class="p">,</span> <span class="n">default_args</span><span class="o">=</span><span class="n">default_args</span><span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="n">login</span> <span class="o">=</span> <span class="nc">PythonOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"login"</span><span class="p">,</span>
        <span class="n">python_callable</span><span class="o">=</span><span class="n">login_func</span><span class="p">,</span>
        <span class="n">op_args</span><span class="o">=</span><span class="p">[</span><span class="n">account</span><span class="p">,</span> <span class="n">password</span><span class="p">],</span>
        <span class="n">provide_context</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">DummyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">"do_nothing"</span><span class="p">)</span>

    <span class="n">login</span> <span class="o">&gt;&gt;</span> <span class="n">end</span>
</code></pre></div></div>

<p>在上面的程式碼裡面，我們先定義了一個function，假裝是要登入某個服務，接著定義了function需要使用到的參數<code class="language-plaintext highlighter-rouge">account</code>和<code class="language-plaintext highlighter-rouge">password</code>，再來是這個任務的參數，最後是整個任務的流程。</p>

<p><a href="https://airflow.apache.org/docs/apache-airflow/stable/concepts/operators.html">airflow提供了許許多多的operator</a>，可以根據自己的需要來去選擇哪一個operator比較適合這個任務，在定義好了operator的object以後，再透過<code class="language-plaintext highlighter-rouge">login &gt;&gt; end</code>這樣的方式來去把這些operator串在一起，這邊也支援分支，只要整個流程是一個Directed Acyclic Graph（DAG）就行。</p>

<p>值得一提的是，我在寫的時候如果把<code class="language-plaintext highlighter-rouge">with DAG(...):</code>這一段放進<code class="language-plaintext highlighter-rouge">if __name__ == "__main__"</code>的話，好像airflow就抓不到的樣子，在寫的時候需要注意一下。</p>

<h3 id="測試新加入的任務">測試新加入的任務</h3>

<p>在寫好上面的script以後，可以直接像以往寫python的方式那樣去執行看看，它並不會真的去執行，airflow會去看有沒有哪邊有語法上的錯誤。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 /path/to/your/script.py
</code></pre></div></div>

<p>如果想要實際測試看看，可以上去UI、點進job裡面，右上角有個三角形可以手動跑整個流程試試看。</p>

<p><img src="./airflow_job.png" alt="Airflow Job Page" /></p>

<p>如果跑起來有符合預期的話，就能toggle左上角的選項，啟動這個DAG，讓它根據設定的頻率來執行了。</p>

<p>值得一提的是，當開啟這個DAG以後，airflow會補跑<code class="language-plaintext highlighter-rouge">start_date</code>到今天的所有job，所以要先確定一下<code class="language-plaintext highlighter-rouge">start_date</code>有沒有設定對再開啟會比較好。</p>

<h3 id="開始的時間跟預期的不同">開始的時間跟預期的不同？</h3>

<p>在上面的script裡面，我們設定</p>

<pre><code class="language-python3">    "start_date": datetime(2022, 2, 8, 11, 0),
    "schedule_interval": "@daily",
</code></pre>

<p>期望它可以從2022/2/8的早上11點開始執行第一次，並以天為頻率來執行，但實際上會發現它第一次的執行時間會是2022/2/9的早上11點，原因是因為上面寫的是任務時間，跟實際上執行的時間不同，airflow會在<code class="language-plaintext highlighter-rouge">start_date+schedule_interval</code>的時間過完以後才開始處理<code class="language-plaintext highlighter-rouge">start_date+schedule_interval</code>的資料。</p>

<p>想法上有點類似於，我想將今天使用者的資料統整起來，並壓上今天的日期，但我實際執行統整這個動作的時間會是在明天，因為今天還沒有過完，如果今天就做統整，就會有部分的資料被漏掉。</p>

<h2 id="結論">結論</h2>

<p>Airflow是個安裝簡單、功能也很齊全的排程系統，上面敘述的部分只是airflow的九牛一毛而已，還有許許多多的功能沒有被覆蓋到，如果有興趣或是有複雜的功能想要實現，可以去看看<a href="https://airflow.apache.org/docs/apache-airflow/stable/index.html">airflow的官方文件</a>。</p>

<h2 id="參考資料">參考資料</h2>

<ol>
  <li><a href="https://leemeng.tw/a-story-about-airflow-and-data-engineering-using-how-to-use-python-to-catch-up-with-latest-comics-as-an-example.html">一段 Airflow 與資料工程的故事：談如何用 Python 追漫畫連載</a></li>
</ol>]]></content><author><name>Your Name</name></author><category term="Tool" /><summary type="html"><![CDATA[這篇文章紀錄一下嘗試使用Airflow的經歷。]]></summary></entry></feed>